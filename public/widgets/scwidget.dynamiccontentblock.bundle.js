/*! For license information please see scwidget.dynamiccontentblock.bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("React"),require("ReactDOM")):"function"==typeof define&&define.amd?define("SCWidgetDynamicContentBlock",["React","ReactDOM"],t):"object"==typeof exports?exports.SCWidgetDynamicContentBlock=t(require("React"),require("ReactDOM")):e.SCWidgetDynamicContentBlock=t(e.React,e.ReactDOM)}(self,(function(e,t){return function(){var n={960:function(e,t){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Doctype=t.CDATA=t.Tag=t.Style=t.Script=t.Comment=t.Directive=t.Text=t.Root=t.isTag=t.ElementType=void 0,function(e){e.Root="root",e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"}(n=t.ElementType||(t.ElementType={})),t.isTag=function(e){return e.type===n.Tag||e.type===n.Script||e.type===n.Style},t.Root=n.Root,t.Text=n.Text,t.Directive=n.Directive,t.Comment=n.Comment,t.Script=n.Script,t.Style=n.Style,t.Tag=n.Tag,t.CDATA=n.CDATA,t.Doctype=n.Doctype},915:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.DomHandler=void 0;var a=n(960),i=n(790);o(n(790),t);var l={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},u=function(){function e(e,t,n){this.dom=[],this.root=new i.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof t&&(n=t,t=l),"object"==typeof e&&(t=e,e=void 0),this.callback=null!=e?e:null,this.options=null!=t?t:l,this.elementCB=null!=n?n:null}return e.prototype.onparserinit=function(e){this.parser=e},e.prototype.onreset=function(){this.dom=[],this.root=new i.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},e.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},e.prototype.onerror=function(e){this.handleCallback(e)},e.prototype.onclosetag=function(){this.lastNode=null;var e=this.tagStack.pop();this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(e)},e.prototype.onopentag=function(e,t){var n=this.options.xmlMode?a.ElementType.Tag:void 0,r=new i.Element(e,t,void 0,n);this.addNode(r),this.tagStack.push(r)},e.prototype.ontext=function(e){var t=this.lastNode;if(t&&t.type===a.ElementType.Text)t.data+=e,this.options.withEndIndices&&(t.endIndex=this.parser.endIndex);else{var n=new i.Text(e);this.addNode(n),this.lastNode=n}},e.prototype.oncomment=function(e){if(this.lastNode&&this.lastNode.type===a.ElementType.Comment)this.lastNode.data+=e;else{var t=new i.Comment(e);this.addNode(t),this.lastNode=t}},e.prototype.oncommentend=function(){this.lastNode=null},e.prototype.oncdatastart=function(){var e=new i.Text(""),t=new i.CDATA([e]);this.addNode(t),e.parent=t,this.lastNode=e},e.prototype.oncdataend=function(){this.lastNode=null},e.prototype.onprocessinginstruction=function(e,t){var n=new i.ProcessingInstruction(e,t);this.addNode(n)},e.prototype.handleCallback=function(e){if("function"==typeof this.callback)this.callback(e,this.dom);else if(e)throw e},e.prototype.addNode=function(e){var t=this.tagStack[this.tagStack.length-1],n=t.children[t.children.length-1];this.options.withStartIndices&&(e.startIndex=this.parser.startIndex),this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),t.children.push(e),n&&(e.prev=n,n.next=e),e.parent=t,this.lastNode=null},e}();t.DomHandler=u,t.default=u},790:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.cloneNode=t.hasChildren=t.isDocument=t.isDirective=t.isComment=t.isText=t.isCDATA=t.isTag=t.Element=t.Document=t.CDATA=t.NodeWithChildren=t.ProcessingInstruction=t.Comment=t.Text=t.DataNode=t.Node=void 0;var i=n(960),l=function(){function e(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent},set:function(e){this.parent=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this.prev},set:function(e){this.prev=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this.next},set:function(e){this.next=e},enumerable:!1,configurable:!0}),e.prototype.cloneNode=function(e){return void 0===e&&(e=!1),w(this,e)},e}();t.Node=l;var u=function(e){function t(t){var n=e.call(this)||this;return n.data=t,n}return o(t,e),Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(e){this.data=e},enumerable:!1,configurable:!0}),t}(l);t.DataNode=u;var s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Text,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(u);t.Text=s;var c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Comment,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(u);t.Comment=c;var f=function(e){function t(t,n){var r=e.call(this,n)||this;return r.name=t,r.type=i.ElementType.Directive,r}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(u);t.ProcessingInstruction=f;var d=function(e){function t(t){var n=e.call(this)||this;return n.children=t,n}return o(t,e),Object.defineProperty(t.prototype,"firstChild",{get:function(){var e;return null!==(e=this.children[0])&&void 0!==e?e:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(e){this.children=e},enumerable:!1,configurable:!0}),t}(l);t.NodeWithChildren=d;var p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.CDATA,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(d);t.CDATA=p;var h=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Root,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(d);t.Document=h;var m=function(e){function t(t,n,r,o){void 0===r&&(r=[]),void 0===o&&(o="script"===t?i.ElementType.Script:"style"===t?i.ElementType.Style:i.ElementType.Tag);var a=e.call(this,r)||this;return a.name=t,a.attribs=n,a.type=o,a}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(e){this.name=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var e=this;return Object.keys(this.attribs).map((function(t){var n,r;return{name:t,value:e.attribs[t],namespace:null===(n=e["x-attribsNamespace"])||void 0===n?void 0:n[t],prefix:null===(r=e["x-attribsPrefix"])||void 0===r?void 0:r[t]}}))},enumerable:!1,configurable:!0}),t}(d);function y(e){return(0,i.isTag)(e)}function g(e){return e.type===i.ElementType.CDATA}function v(e){return e.type===i.ElementType.Text}function b(e){return e.type===i.ElementType.Comment}function x(e){return e.type===i.ElementType.Directive}function S(e){return e.type===i.ElementType.Root}function w(e,t){var n;if(void 0===t&&(t=!1),v(e))n=new s(e.data);else if(b(e))n=new c(e.data);else if(y(e)){var r=t?k(e.children):[],o=new m(e.name,a({},e.attribs),r);r.forEach((function(e){return e.parent=o})),null!=e.namespace&&(o.namespace=e.namespace),e["x-attribsNamespace"]&&(o["x-attribsNamespace"]=a({},e["x-attribsNamespace"])),e["x-attribsPrefix"]&&(o["x-attribsPrefix"]=a({},e["x-attribsPrefix"])),n=o}else if(g(e)){r=t?k(e.children):[];var i=new p(r);r.forEach((function(e){return e.parent=i})),n=i}else if(S(e)){r=t?k(e.children):[];var l=new h(r);r.forEach((function(e){return e.parent=l})),e["x-mode"]&&(l["x-mode"]=e["x-mode"]),n=l}else{if(!x(e))throw new Error("Not implemented yet: ".concat(e.type));var u=new f(e.name,e.data);null!=e["x-name"]&&(u["x-name"]=e["x-name"],u["x-publicId"]=e["x-publicId"],u["x-systemId"]=e["x-systemId"]),n=u}return n.startIndex=e.startIndex,n.endIndex=e.endIndex,null!=e.sourceCodeLocation&&(n.sourceCodeLocation=e.sourceCodeLocation),n}function k(e){for(var t=e.map((function(e){return w(e,!0)})),n=1;n<t.length;n++)t[n].prev=t[n-1],t[n-1].next=t[n];return t}t.Element=m,t.isTag=y,t.isCDATA=g,t.isText=v,t.isComment=b,t.isDirective=x,t.isDocument=S,t.hasChildren=function(e){return Object.prototype.hasOwnProperty.call(e,"children")},t.cloneNode=w},856:function(e){e.exports=function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,n){return t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},t(e,n)}function n(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function r(e,o,a){return r=n()?Reflect.construct:function(e,n,r){var o=[null];o.push.apply(o,n);var a=new(Function.bind.apply(e,o));return r&&t(a,r.prototype),a},r.apply(null,arguments)}function o(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=Object.hasOwnProperty,l=Object.setPrototypeOf,u=Object.isFrozen,s=Object.getPrototypeOf,c=Object.getOwnPropertyDescriptor,f=Object.freeze,d=Object.seal,p=Object.create,h="undefined"!=typeof Reflect&&Reflect,m=h.apply,y=h.construct;m||(m=function(e,t,n){return e.apply(t,n)}),f||(f=function(e){return e}),d||(d=function(e){return e}),y||(y=function(e,t){return r(e,o(t))});var g,v=A(Array.prototype.forEach),b=A(Array.prototype.pop),x=A(Array.prototype.push),S=A(String.prototype.toLowerCase),w=A(String.prototype.toString),k=A(String.prototype.match),E=A(String.prototype.replace),T=A(String.prototype.indexOf),C=A(String.prototype.trim),O=A(RegExp.prototype.test),R=(g=TypeError,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return y(g,t)});function A(e){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return m(e,t,r)}}function _(e,t,n){n=n||S,l&&l(e,null);for(var r=t.length;r--;){var o=t[r];if("string"==typeof o){var a=n(o);a!==o&&(u(t)||(t[r]=a),o=a)}e[o]=!0}return e}function N(e){var t,n=p(null);for(t in e)m(i,e,[t])&&(n[t]=e[t]);return n}function F(e,t){for(;null!==e;){var n=c(e,t);if(n){if(n.get)return A(n.get);if("function"==typeof n.value)return A(n.value)}e=s(e)}return function(e){return console.warn("fallback value for",e),null}}var P=f(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),M=f(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),D=f(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),I=f(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),L=f(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),j=f(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),B=f(["#text"]),z=f(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),H=f(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),U=f(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),V=f(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),q=d(/\{\{[\w\W]*|[\w\W]*\}\}/gm),$=d(/<%[\w\W]*|[\w\W]*%>/gm),W=d(/\${[\w\W]*}/gm),G=d(/^data-[\-\w.\u00B7-\uFFFF]/),X=d(/^aria-[\-\w]+$/),Y=d(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),Z=d(/^(?:\w+script|data):/i),J=d(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),K=d(/^html$/i),Q=function(){return"undefined"==typeof window?null:window},ee=function(t,n){if("object"!==e(t)||"function"!=typeof t.createPolicy)return null;var r=null,o="data-tt-policy-suffix";n.currentScript&&n.currentScript.hasAttribute(o)&&(r=n.currentScript.getAttribute(o));var a="dompurify"+(r?"#"+r:"");try{return t.createPolicy(a,{createHTML:function(e){return e},createScriptURL:function(e){return e}})}catch(e){return console.warn("TrustedTypes policy "+a+" could not be created."),null}};return function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Q(),r=function(e){return t(e)};if(r.version="2.4.1",r.removed=[],!n||!n.document||9!==n.document.nodeType)return r.isSupported=!1,r;var a=n.document,i=n.document,l=n.DocumentFragment,u=n.HTMLTemplateElement,s=n.Node,c=n.Element,d=n.NodeFilter,p=n.NamedNodeMap,h=void 0===p?n.NamedNodeMap||n.MozNamedAttrMap:p,m=n.HTMLFormElement,y=n.DOMParser,g=n.trustedTypes,A=c.prototype,te=F(A,"cloneNode"),ne=F(A,"nextSibling"),re=F(A,"childNodes"),oe=F(A,"parentNode");if("function"==typeof u){var ae=i.createElement("template");ae.content&&ae.content.ownerDocument&&(i=ae.content.ownerDocument)}var ie=ee(g,a),le=ie?ie.createHTML(""):"",ue=i,se=ue.implementation,ce=ue.createNodeIterator,fe=ue.createDocumentFragment,de=ue.getElementsByTagName,pe=a.importNode,he={};try{he=N(i).documentMode?i.documentMode:{}}catch(e){}var me={};r.isSupported="function"==typeof oe&&se&&void 0!==se.createHTMLDocument&&9!==he;var ye,ge,ve=q,be=$,xe=W,Se=G,we=X,ke=Z,Ee=J,Te=Y,Ce=null,Oe=_({},[].concat(o(P),o(M),o(D),o(L),o(B))),Re=null,Ae=_({},[].concat(o(z),o(H),o(U),o(V))),_e=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Ne=null,Fe=null,Pe=!0,Me=!0,De=!1,Ie=!1,Le=!1,je=!1,Be=!1,ze=!1,He=!1,Ue=!1,Ve=!0,qe=!1,$e="user-content-",We=!0,Ge=!1,Xe={},Ye=null,Ze=_({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Je=null,Ke=_({},["audio","video","img","source","image","track"]),Qe=null,et=_({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),tt="http://www.w3.org/1998/Math/MathML",nt="http://www.w3.org/2000/svg",rt="http://www.w3.org/1999/xhtml",ot=rt,at=!1,it=null,lt=_({},[tt,nt,rt],w),ut=["application/xhtml+xml","text/html"],st="text/html",ct=null,ft=i.createElement("form"),dt=function(e){return e instanceof RegExp||e instanceof Function},pt=function(t){ct&&ct===t||(t&&"object"===e(t)||(t={}),t=N(t),ye=ye=-1===ut.indexOf(t.PARSER_MEDIA_TYPE)?st:t.PARSER_MEDIA_TYPE,ge="application/xhtml+xml"===ye?w:S,Ce="ALLOWED_TAGS"in t?_({},t.ALLOWED_TAGS,ge):Oe,Re="ALLOWED_ATTR"in t?_({},t.ALLOWED_ATTR,ge):Ae,it="ALLOWED_NAMESPACES"in t?_({},t.ALLOWED_NAMESPACES,w):lt,Qe="ADD_URI_SAFE_ATTR"in t?_(N(et),t.ADD_URI_SAFE_ATTR,ge):et,Je="ADD_DATA_URI_TAGS"in t?_(N(Ke),t.ADD_DATA_URI_TAGS,ge):Ke,Ye="FORBID_CONTENTS"in t?_({},t.FORBID_CONTENTS,ge):Ze,Ne="FORBID_TAGS"in t?_({},t.FORBID_TAGS,ge):{},Fe="FORBID_ATTR"in t?_({},t.FORBID_ATTR,ge):{},Xe="USE_PROFILES"in t&&t.USE_PROFILES,Pe=!1!==t.ALLOW_ARIA_ATTR,Me=!1!==t.ALLOW_DATA_ATTR,De=t.ALLOW_UNKNOWN_PROTOCOLS||!1,Ie=t.SAFE_FOR_TEMPLATES||!1,Le=t.WHOLE_DOCUMENT||!1,ze=t.RETURN_DOM||!1,He=t.RETURN_DOM_FRAGMENT||!1,Ue=t.RETURN_TRUSTED_TYPE||!1,Be=t.FORCE_BODY||!1,Ve=!1!==t.SANITIZE_DOM,qe=t.SANITIZE_NAMED_PROPS||!1,We=!1!==t.KEEP_CONTENT,Ge=t.IN_PLACE||!1,Te=t.ALLOWED_URI_REGEXP||Te,ot=t.NAMESPACE||rt,t.CUSTOM_ELEMENT_HANDLING&&dt(t.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(_e.tagNameCheck=t.CUSTOM_ELEMENT_HANDLING.tagNameCheck),t.CUSTOM_ELEMENT_HANDLING&&dt(t.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(_e.attributeNameCheck=t.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),t.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof t.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(_e.allowCustomizedBuiltInElements=t.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),Ie&&(Me=!1),He&&(ze=!0),Xe&&(Ce=_({},o(B)),Re=[],!0===Xe.html&&(_(Ce,P),_(Re,z)),!0===Xe.svg&&(_(Ce,M),_(Re,H),_(Re,V)),!0===Xe.svgFilters&&(_(Ce,D),_(Re,H),_(Re,V)),!0===Xe.mathMl&&(_(Ce,L),_(Re,U),_(Re,V))),t.ADD_TAGS&&(Ce===Oe&&(Ce=N(Ce)),_(Ce,t.ADD_TAGS,ge)),t.ADD_ATTR&&(Re===Ae&&(Re=N(Re)),_(Re,t.ADD_ATTR,ge)),t.ADD_URI_SAFE_ATTR&&_(Qe,t.ADD_URI_SAFE_ATTR,ge),t.FORBID_CONTENTS&&(Ye===Ze&&(Ye=N(Ye)),_(Ye,t.FORBID_CONTENTS,ge)),We&&(Ce["#text"]=!0),Le&&_(Ce,["html","head","body"]),Ce.table&&(_(Ce,["tbody"]),delete Ne.tbody),f&&f(t),ct=t)},ht=_({},["mi","mo","mn","ms","mtext"]),mt=_({},["foreignobject","desc","title","annotation-xml"]),yt=_({},["title","style","font","a","script"]),gt=_({},M);_(gt,D),_(gt,I);var vt=_({},L);_(vt,j);var bt=function(e){var t=oe(e);t&&t.tagName||(t={namespaceURI:ot,tagName:"template"});var n=S(e.tagName),r=S(t.tagName);return!!it[e.namespaceURI]&&(e.namespaceURI===nt?t.namespaceURI===rt?"svg"===n:t.namespaceURI===tt?"svg"===n&&("annotation-xml"===r||ht[r]):Boolean(gt[n]):e.namespaceURI===tt?t.namespaceURI===rt?"math"===n:t.namespaceURI===nt?"math"===n&&mt[r]:Boolean(vt[n]):e.namespaceURI===rt?!(t.namespaceURI===nt&&!mt[r])&&!(t.namespaceURI===tt&&!ht[r])&&!vt[n]&&(yt[n]||!gt[n]):!("application/xhtml+xml"!==ye||!it[e.namespaceURI]))},xt=function(e){x(r.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){try{e.outerHTML=le}catch(t){e.remove()}}},St=function(e,t){try{x(r.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){x(r.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e&&!Re[e])if(ze||He)try{xt(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}},wt=function(e){var t,n;if(Be)e="<remove></remove>"+e;else{var r=k(e,/^[\r\n\t ]+/);n=r&&r[0]}"application/xhtml+xml"===ye&&ot===rt&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");var o=ie?ie.createHTML(e):e;if(ot===rt)try{t=(new y).parseFromString(o,ye)}catch(e){}if(!t||!t.documentElement){t=se.createDocument(ot,"template",null);try{t.documentElement.innerHTML=at?"":o}catch(e){}}var a=t.body||t.documentElement;return e&&n&&a.insertBefore(i.createTextNode(n),a.childNodes[0]||null),ot===rt?de.call(t,Le?"html":"body")[0]:Le?t.documentElement:a},kt=function(e){return ce.call(e.ownerDocument||e,e,d.SHOW_ELEMENT|d.SHOW_COMMENT|d.SHOW_TEXT,null,!1)},Et=function(e){return e instanceof m&&("string"!=typeof e.nodeName||"string"!=typeof e.textContent||"function"!=typeof e.removeChild||!(e.attributes instanceof h)||"function"!=typeof e.removeAttribute||"function"!=typeof e.setAttribute||"string"!=typeof e.namespaceURI||"function"!=typeof e.insertBefore||"function"!=typeof e.hasChildNodes)},Tt=function(t){return"object"===e(s)?t instanceof s:t&&"object"===e(t)&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName},Ct=function(e,t,n){me[e]&&v(me[e],(function(e){e.call(r,t,n,ct)}))},Ot=function(e){var t;if(Ct("beforeSanitizeElements",e,null),Et(e))return xt(e),!0;if(O(/[\u0080-\uFFFF]/,e.nodeName))return xt(e),!0;var n=ge(e.nodeName);if(Ct("uponSanitizeElement",e,{tagName:n,allowedTags:Ce}),e.hasChildNodes()&&!Tt(e.firstElementChild)&&(!Tt(e.content)||!Tt(e.content.firstElementChild))&&O(/<[/\w]/g,e.innerHTML)&&O(/<[/\w]/g,e.textContent))return xt(e),!0;if("select"===n&&O(/<template/i,e.innerHTML))return xt(e),!0;if(!Ce[n]||Ne[n]){if(!Ne[n]&&At(n)){if(_e.tagNameCheck instanceof RegExp&&O(_e.tagNameCheck,n))return!1;if(_e.tagNameCheck instanceof Function&&_e.tagNameCheck(n))return!1}if(We&&!Ye[n]){var o=oe(e)||e.parentNode,a=re(e)||e.childNodes;if(a&&o)for(var i=a.length-1;i>=0;--i)o.insertBefore(te(a[i],!0),ne(e))}return xt(e),!0}return e instanceof c&&!bt(e)?(xt(e),!0):"noscript"!==n&&"noembed"!==n||!O(/<\/no(script|embed)/i,e.innerHTML)?(Ie&&3===e.nodeType&&(t=e.textContent,t=E(t,ve," "),t=E(t,be," "),t=E(t,xe," "),e.textContent!==t&&(x(r.removed,{element:e.cloneNode()}),e.textContent=t)),Ct("afterSanitizeElements",e,null),!1):(xt(e),!0)},Rt=function(e,t,n){if(Ve&&("id"===t||"name"===t)&&(n in i||n in ft))return!1;if(Me&&!Fe[t]&&O(Se,t));else if(Pe&&O(we,t));else if(!Re[t]||Fe[t]){if(!(At(e)&&(_e.tagNameCheck instanceof RegExp&&O(_e.tagNameCheck,e)||_e.tagNameCheck instanceof Function&&_e.tagNameCheck(e))&&(_e.attributeNameCheck instanceof RegExp&&O(_e.attributeNameCheck,t)||_e.attributeNameCheck instanceof Function&&_e.attributeNameCheck(t))||"is"===t&&_e.allowCustomizedBuiltInElements&&(_e.tagNameCheck instanceof RegExp&&O(_e.tagNameCheck,n)||_e.tagNameCheck instanceof Function&&_e.tagNameCheck(n))))return!1}else if(Qe[t]);else if(O(Te,E(n,Ee,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==T(n,"data:")||!Je[e])if(De&&!O(ke,E(n,Ee,"")));else if(n)return!1;return!0},At=function(e){return e.indexOf("-")>0},_t=function(t){var n,o,a,i;Ct("beforeSanitizeAttributes",t,null);var l=t.attributes;if(l){var u={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:Re};for(i=l.length;i--;){var s=n=l[i],c=s.name,f=s.namespaceURI;if(o="value"===c?n.value:C(n.value),a=ge(c),u.attrName=a,u.attrValue=o,u.keepAttr=!0,u.forceKeepAttr=void 0,Ct("uponSanitizeAttribute",t,u),o=u.attrValue,!u.forceKeepAttr&&(St(c,t),u.keepAttr))if(O(/\/>/i,o))St(c,t);else{Ie&&(o=E(o,ve," "),o=E(o,be," "),o=E(o,xe," "));var d=ge(t.nodeName);if(Rt(d,a,o)){if(!qe||"id"!==a&&"name"!==a||(St(c,t),o=$e+o),ie&&"object"===e(g)&&"function"==typeof g.getAttributeType)if(f);else switch(g.getAttributeType(d,a)){case"TrustedHTML":o=ie.createHTML(o);break;case"TrustedScriptURL":o=ie.createScriptURL(o)}try{f?t.setAttributeNS(f,c,o):t.setAttribute(c,o),b(r.removed)}catch(e){}}}}Ct("afterSanitizeAttributes",t,null)}},Nt=function e(t){var n,r=kt(t);for(Ct("beforeSanitizeShadowDOM",t,null);n=r.nextNode();)Ct("uponSanitizeShadowNode",n,null),Ot(n)||(n.content instanceof l&&e(n.content),_t(n));Ct("afterSanitizeShadowDOM",t,null)};return r.sanitize=function(t){var o,i,u,c,f,d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if((at=!t)&&(t="\x3c!--\x3e"),"string"!=typeof t&&!Tt(t)){if("function"!=typeof t.toString)throw R("toString is not a function");if("string"!=typeof(t=t.toString()))throw R("dirty is not a string, aborting")}if(!r.isSupported){if("object"===e(n.toStaticHTML)||"function"==typeof n.toStaticHTML){if("string"==typeof t)return n.toStaticHTML(t);if(Tt(t))return n.toStaticHTML(t.outerHTML)}return t}if(je||pt(d),r.removed=[],"string"==typeof t&&(Ge=!1),Ge){if(t.nodeName){var p=ge(t.nodeName);if(!Ce[p]||Ne[p])throw R("root node is forbidden and cannot be sanitized in-place")}}else if(t instanceof s)1===(i=(o=wt("\x3c!----\x3e")).ownerDocument.importNode(t,!0)).nodeType&&"BODY"===i.nodeName||"HTML"===i.nodeName?o=i:o.appendChild(i);else{if(!ze&&!Ie&&!Le&&-1===t.indexOf("<"))return ie&&Ue?ie.createHTML(t):t;if(!(o=wt(t)))return ze?null:Ue?le:""}o&&Be&&xt(o.firstChild);for(var h=kt(Ge?t:o);u=h.nextNode();)3===u.nodeType&&u===c||Ot(u)||(u.content instanceof l&&Nt(u.content),_t(u),c=u);if(c=null,Ge)return t;if(ze){if(He)for(f=fe.call(o.ownerDocument);o.firstChild;)f.appendChild(o.firstChild);else f=o;return Re.shadowroot&&(f=pe.call(a,f,!0)),f}var m=Le?o.outerHTML:o.innerHTML;return Le&&Ce["!doctype"]&&o.ownerDocument&&o.ownerDocument.doctype&&o.ownerDocument.doctype.name&&O(K,o.ownerDocument.doctype.name)&&(m="<!DOCTYPE "+o.ownerDocument.doctype.name+">\n"+m),Ie&&(m=E(m,ve," "),m=E(m,be," "),m=E(m,xe," ")),ie&&Ue?ie.createHTML(m):m},r.setConfig=function(e){pt(e),je=!0},r.clearConfig=function(){ct=null,je=!1},r.isValidAttribute=function(e,t,n){ct||pt({});var r=ge(e),o=ge(t);return Rt(r,o,n)},r.addHook=function(e,t){"function"==typeof t&&(me[e]=me[e]||[],x(me[e],t))},r.removeHook=function(e){if(me[e])return b(me[e])},r.removeHooks=function(e){me[e]&&(me[e]=[])},r.removeAllHooks=function(){me={}},r}()}()},885:function(e,t){t.CASE_SENSITIVE_TAG_NAMES=["animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussainBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","linearGradient","radialGradient","textPath"]},276:function(e){var t="html",n="head",r="body",o=/<([a-zA-Z]+[0-9]?)/,a=/<head[^]*>/i,i=/<body[^]*>/i,l=function(){throw new Error("This browser does not support `document.implementation.createHTMLDocument`")},u=function(){throw new Error("This browser does not support `DOMParser.prototype.parseFromString`")},s="object"==typeof window&&window.DOMParser;if("function"==typeof s){var c=new s;l=u=function(e,t){return t&&(e="<"+t+">"+e+"</"+t+">"),c.parseFromString(e,"text/html")}}if("object"==typeof document&&document.implementation){var f=document.implementation.createHTMLDocument();l=function(e,t){return t?(f.documentElement.querySelector(t).innerHTML=e,f):(f.documentElement.innerHTML=e,f)}}var d,p="object"==typeof document?document.createElement("template"):{};p.content&&(d=function(e){return p.innerHTML=e,p.content.childNodes}),e.exports=function(e){var s,c,f,p,h=e.match(o);switch(h&&h[1]&&(s=h[1].toLowerCase()),s){case t:return c=u(e),a.test(e)||(f=c.querySelector(n))&&f.parentNode.removeChild(f),i.test(e)||(f=c.querySelector(r))&&f.parentNode.removeChild(f),c.querySelectorAll(t);case n:case r:return p=(c=l(e)).querySelectorAll(s),i.test(e)&&a.test(e)?p[0].parentNode.childNodes:p;default:return d?d(e):(f=l(e,r).querySelector(r)).childNodes}}},152:function(e,t,n){var r=n(276),o=n(507).formatDOM,a=/<(![a-zA-Z\s]+)>/;e.exports=function(e){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(""===e)return[];var t,n=e.match(a);return n&&n[1]&&(t=n[1]),o(r(e),null,t)}},507:function(e,t,n){for(var r,o=n(915),a=n(885).CASE_SENSITIVE_TAG_NAMES,i=o.Comment,l=o.Element,u=o.ProcessingInstruction,s=o.Text,c={},f=0,d=a.length;f<d;f++)r=a[f],c[r.toLowerCase()]=r;function p(e){for(var t,n={},r=0,o=e.length;r<o;r++)n[(t=e[r]).name]=t.value;return n}function h(e){return function(e){return c[e]}(e=e.toLowerCase())||e}t.formatAttributes=p,t.formatDOM=function e(t,n,r){n=n||null;for(var o=[],a=0,c=t.length;a<c;a++){var f,d=t[a];switch(d.nodeType){case 1:(f=new l(h(d.nodeName),p(d.attributes))).children=e(d.childNodes,f);break;case 3:f=new s(d.nodeValue);break;case 8:f=new i(d.nodeValue);break;default:continue}var m=o[a-1]||null;m&&(m.next=f),f.parent=n,f.prev=m,f.next=null,o.push(f)}return r&&((f=new u(r.substring(0,r.indexOf(" ")).toLowerCase(),r)).next=o[0]||null,f.parent=n,o.unshift(f),o[1]&&(o[1].prev=o[0])),o}},488:function(e,t,n){var r=n(915),o=n(152),a=n(484),i=n(670);o="function"==typeof o.default?o.default:o;var l={lowerCaseAttributeNames:!1};function u(e,t){if("string"!=typeof e)throw new TypeError("First argument must be a string");return""===e?[]:i(o(e,(t=t||{}).htmlparser2||l),t)}u.domToReact=i,u.htmlToDOM=o,u.attributesToProps=a,u.Comment=r.Comment,u.Element=r.Element,u.ProcessingInstruction=r.ProcessingInstruction,u.Text=r.Text,e.exports=u,e.exports.default=u},484:function(e,t,n){var r=n(726),o=n(606);function a(e){return r.possibleStandardNames[e]}e.exports=function(e){var t,n,i,l,u,s={},c=(e=e||{}).type&&{reset:!0,submit:!0}[e.type];for(t in e)if(i=e[t],r.isCustomAttribute(t))s[t]=i;else if(l=a(n=t.toLowerCase()))switch(u=r.getPropertyInfo(l),"checked"!==l&&"value"!==l||c||(l=a("default"+n)),s[l]=i,u&&u.type){case r.BOOLEAN:s[l]=!0;break;case r.OVERLOADED_BOOLEAN:""===i&&(s[l]=!0)}else o.PRESERVE_CUSTOM_ATTRIBUTES&&(s[t]=i);return o.setStyleProp(e.style,s),s}},670:function(e,t,n){var r=n(24),o=n(484),a=n(606),i=a.setStyleProp,l=a.canTextBeChildOfNode;function u(e){return a.PRESERVE_CUSTOM_ATTRIBUTES&&"tag"===e.type&&a.isCustomComponent(e.name,e.attribs)}e.exports=function e(t,n){for(var a,s,c,f,d,p=(n=n||{}).library||r,h=p.cloneElement,m=p.createElement,y=p.isValidElement,g=[],v="function"==typeof n.replace,b=n.trim,x=0,S=t.length;x<S;x++)if(a=t[x],v&&y(c=n.replace(a)))S>1&&(c=h(c,{key:c.key||x})),g.push(c);else if("text"!==a.type){switch(f=a.attribs,u(a)?i(f.style,f):f&&(f=o(f)),d=null,a.type){case"script":case"style":a.children[0]&&(f.dangerouslySetInnerHTML={__html:a.children[0].data});break;case"tag":"textarea"===a.name&&a.children[0]?f.defaultValue=a.children[0].data:a.children&&a.children.length&&(d=e(a.children,n));break;default:continue}S>1&&(f.key=x),g.push(m(a.name,f,d))}else{if((s=!a.data.trim().length)&&a.parent&&!l(a.parent))continue;if(b&&s)continue;g.push(a.data)}return 1===g.length?g[0]:g}},606:function(e,t,n){var r=n(24),o=n(476).default,a={reactCompat:!0},i=r.version.split(".")[0]>=16,l=new Set(["tr","tbody","thead","tfoot","colgroup","table","head","html","frameset"]);e.exports={PRESERVE_CUSTOM_ATTRIBUTES:i,invertObject:function(e,t){if(!e||"object"!=typeof e)throw new TypeError("First argument must be an object");var n,r,o="function"==typeof t,a={},i={};for(n in e)r=e[n],o&&(a=t(n,r))&&2===a.length?i[a[0]]=a[1]:"string"==typeof r&&(i[r]=n);return i},isCustomComponent:function(e,t){if(-1===e.indexOf("-"))return t&&"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}},setStyleProp:function(e,t){if(null!=e)try{t.style=o(e,a)}catch(e){t.style={}}},canTextBeChildOfNode:function(e){return!l.has(e.name)},elementsWithNoTextChildren:l}},139:function(e){var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,a=/^:\s*/,i=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,l=/^[;\s]*/,u=/^\s+|\s+$/g,s="";function c(e){return e?e.replace(u,s):s}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var f=1,d=1;function p(e){var t=e.match(n);t&&(f+=t.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(t){return t.position=new m(e),b(),t}}function m(e){this.start=e,this.end={line:f,column:d},this.source=u.source}m.prototype.content=e;var y=[];function g(t){var n=new Error(u.source+":"+f+":"+d+": "+t);if(n.reason=t,n.filename=u.source,n.line=f,n.column=d,n.source=e,!u.silent)throw n;y.push(n)}function v(t){var n=t.exec(e);if(n){var r=n[0];return p(r),e=e.slice(r.length),n}}function b(){v(r)}function x(e){var t;for(e=e||[];t=S();)!1!==t&&e.push(t);return e}function S(){var t=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;s!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,s===e.charAt(n-1))return g("End of comment missing");var r=e.slice(2,n-2);return d+=2,p(r),e=e.slice(n),d+=2,t({type:"comment",comment:r})}}function w(){var e=h(),n=v(o);if(n){if(S(),!v(a))return g("property missing ':'");var r=v(i),u=e({type:"declaration",property:c(n[0].replace(t,s)),value:r?c(r[0].replace(t,s)):s});return v(l),u}}return b(),function(){var e,t=[];for(x(t);e=w();)!1!==e&&(t.push(e),x(t));return t}()}},774:function(e,t,n){"use strict";var r=n(24);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=Object.prototype.hasOwnProperty,i=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,l={},u={};function s(e){return!!a.call(u,e)||!a.call(l,e)&&(i.test(e)?u[e]=!0:(l[e]=!0,!1))}function c(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var f={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){f[e]=new c(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];f[t]=new c(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){f[e]=new c(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){f[e]=new c(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){f[e]=new c(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){f[e]=new c(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){f[e]=new c(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){f[e]=new c(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){f[e]=new c(e,5,!1,e.toLowerCase(),null,!1,!1)}));var d=/[\-:]([a-z])/g;function p(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(d,p);f[t]=new c(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(d,p);f[t]=new c(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(d,p);f[t]=new c(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){f[e]=new c(e,1,!1,e.toLowerCase(),null,!1,!1)})),f.xlinkHref=new c("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){f[e]=new c(e,1,!1,e.toLowerCase(),null,!0,!0)}));var h={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},m=["Webkit","ms","Moz","O"];Object.keys(h).forEach((function(e){m.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),h[t]=h[e]}))}));var y=/["'&<>]/;function g(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var t=y.exec(e);if(t){var n,r="",o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var v=/([A-Z])/g,b=/^ms-/,x=Array.isArray;function S(e,t){return{insertionMode:e,selectedValue:t}}var w=new Map;function k(e,t,n){if("object"!=typeof n)throw Error(o(62));for(var r in t=!0,n)if(a.call(n,r)){var i=n[r];if(null!=i&&"boolean"!=typeof i&&""!==i){if(0===r.indexOf("--")){var l=g(r);i=g((""+i).trim())}else{l=r;var u=w.get(l);void 0!==u||(u=g(l.replace(v,"-$1").toLowerCase().replace(b,"-ms-")),w.set(l,u)),l=u,i="number"==typeof i?0===i||a.call(h,r)?""+i:i+"px":g((""+i).trim())}t?(t=!1,e.push(' style="',l,":",i)):e.push(";",l,":",i)}}t||e.push('"')}function E(e,t,n,r){switch(n){case"style":return void k(e,t,r);case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])if(null!==(t=f.hasOwnProperty(n)?f[n]:null)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=t.attributeName,t.type){case 3:r&&e.push(" ",n,'=""');break;case 4:!0===r?e.push(" ",n,'=""'):!1!==r&&e.push(" ",n,'="',g(r),'"');break;case 5:isNaN(r)||e.push(" ",n,'="',g(r),'"');break;case 6:!isNaN(r)&&1<=r&&e.push(" ",n,'="',g(r),'"');break;default:t.sanitizeURL&&(r=""+r),e.push(" ",n,'="',g(r),'"')}}else if(s(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if("data-"!==(t=n.toLowerCase().slice(0,5))&&"aria-"!==t)return}e.push(" ",n,'="',g(r),'"')}}function T(e,t,n){if(null!=t){if(null!=n)throw Error(o(60));if("object"!=typeof t||!("__html"in t))throw Error(o(61));null!=(t=t.__html)&&e.push(""+t)}}function C(e,t,n,r){e.push(A(n));var o,i=n=null;for(o in t)if(a.call(t,o)){var l=t[o];if(null!=l)switch(o){case"children":n=l;break;case"dangerouslySetInnerHTML":i=l;break;default:E(e,r,o,l)}}return e.push(">"),T(e,i,n),"string"==typeof n?(e.push(g(n)),null):n}var O=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,R=new Map;function A(e){var t=R.get(e);if(void 0===t){if(!O.test(e))throw Error(o(65,e));t="<"+e,R.set(e,t)}return t}function _(e,t,n){if(e.push('\x3c!--$?--\x3e<template id="'),null===n)throw Error(o(395));return e.push(n),e.push('"></template>')}var N=/[<\u2028\u2029]/g;function F(e){return JSON.stringify(e).replace(N,(function(e){switch(e){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}}))}function P(e,t,n,r){return n.generateStaticMarkup?(e.push(g(t)),!1):(""===t?e=r:(r&&e.push("\x3c!-- --\x3e"),e.push(g(t)),e=!0),e)}var M=Object.assign,D=Symbol.for("react.element"),I=Symbol.for("react.portal"),L=Symbol.for("react.fragment"),j=Symbol.for("react.strict_mode"),B=Symbol.for("react.profiler"),z=Symbol.for("react.provider"),H=Symbol.for("react.context"),U=Symbol.for("react.forward_ref"),V=Symbol.for("react.suspense"),q=Symbol.for("react.suspense_list"),$=Symbol.for("react.memo"),W=Symbol.for("react.lazy"),G=Symbol.for("react.scope"),X=Symbol.for("react.debug_trace_mode"),Y=Symbol.for("react.legacy_hidden"),Z=Symbol.for("react.default_value"),J=Symbol.iterator;function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case L:return"Fragment";case I:return"Portal";case B:return"Profiler";case j:return"StrictMode";case V:return"Suspense";case q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case H:return(e.displayName||"Context")+".Consumer";case z:return(e._context.displayName||"Context")+".Provider";case U:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case $:return null!==(t=e.displayName||null)?t:K(e.type)||"Memo";case W:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}var Q={};function ee(e,t){if(!(e=e.contextTypes))return Q;var n,r={};for(n in e)r[n]=t[n];return r}var te=null;function ne(e,t){if(e!==t){e.context._currentValue2=e.parentValue,e=e.parent;var n=t.parent;if(null===e){if(null!==n)throw Error(o(401))}else{if(null===n)throw Error(o(401));ne(e,n)}t.context._currentValue2=t.value}}function re(e){e.context._currentValue2=e.parentValue,null!==(e=e.parent)&&re(e)}function oe(e){var t=e.parent;null!==t&&oe(t),e.context._currentValue2=e.value}function ae(e,t){if(e.context._currentValue2=e.parentValue,null===(e=e.parent))throw Error(o(402));e.depth===t.depth?ne(e,t):ae(e,t)}function ie(e,t){var n=t.parent;if(null===n)throw Error(o(402));e.depth===n.depth?ne(e,n):ie(e,n),t.context._currentValue2=t.value}function le(e){var t=te;t!==e&&(null===t?oe(e):null===e?re(t):t.depth===e.depth?ne(t,e):t.depth>e.depth?ae(t,e):ie(t,e),te=e)}var ue={isMounted:function(){return!1},enqueueSetState:function(e,t){null!==(e=e._reactInternals).queue&&e.queue.push(t)},enqueueReplaceState:function(e,t){(e=e._reactInternals).replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function se(e,t,n,r){var o=void 0!==e.state?e.state:null;e.updater=ue,e.props=n,e.state=o;var a={queue:[],replace:!1};e._reactInternals=a;var i=t.contextType;if(e.context="object"==typeof i&&null!==i?i._currentValue2:r,"function"==typeof(i=t.getDerivedStateFromProps)&&(o=null==(i=i(n,o))?o:M({},o,i),e.state=o),"function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate&&("function"==typeof e.UNSAFE_componentWillMount||"function"==typeof e.componentWillMount))if(t=e.state,"function"==typeof e.componentWillMount&&e.componentWillMount(),"function"==typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),t!==e.state&&ue.enqueueReplaceState(e,e.state,null),null!==a.queue&&0<a.queue.length)if(t=a.queue,i=a.replace,a.queue=null,a.replace=!1,i&&1===t.length)e.state=t[0];else{for(a=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var l=t[i];null!=(l="function"==typeof l?l.call(e,a,n,r):l)&&(o?(o=!1,a=M({},a,l)):M(a,l))}e.state=a}else a.queue=null}var ce={id:1,overflow:""};function fe(e,t,n){var r=e.id;e=e.overflow;var o=32-de(r)-1;r&=~(1<<o),n+=1;var a=32-de(t)+o;if(30<a){var i=o-o%5;return a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,{id:1<<32-de(t)+o|n<<o|r,overflow:a+e}}return{id:1<<a|n<<o|r,overflow:e}}var de=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(pe(e)/he|0)|0},pe=Math.log,he=Math.LN2,me="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ye=null,ge=null,ve=null,be=null,xe=!1,Se=!1,we=0,ke=null,Ee=0;function Te(){if(null===ye)throw Error(o(321));return ye}function Ce(){if(0<Ee)throw Error(o(312));return{memoizedState:null,queue:null,next:null}}function Oe(){return null===be?null===ve?(xe=!1,ve=be=Ce()):(xe=!0,be=ve):null===be.next?(xe=!1,be=be.next=Ce()):(xe=!0,be=be.next),be}function Re(){ge=ye=null,Se=!1,ve=null,Ee=0,be=ke=null}function Ae(e,t){return"function"==typeof t?t(e):t}function _e(e,t,n){if(ye=Te(),be=Oe(),xe){var r=be.queue;if(t=r.dispatch,null!==ke&&void 0!==(n=ke.get(r))){ke.delete(r),r=be.memoizedState;do{r=e(r,n.action),n=n.next}while(null!==n);return be.memoizedState=r,[r,t]}return[be.memoizedState,t]}return e=e===Ae?"function"==typeof t?t():t:void 0!==n?n(t):t,be.memoizedState=e,e=(e=be.queue={last:null,dispatch:null}).dispatch=Fe.bind(null,ye,e),[be.memoizedState,e]}function Ne(e,t){if(ye=Te(),t=void 0===t?null:t,null!==(be=Oe())){var n=be.memoizedState;if(null!==n&&null!==t){var r=n[1];e:if(null===r)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!me(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),be.memoizedState=[e,t],e}function Fe(e,t,n){if(25<=Ee)throw Error(o(301));if(e===ye)if(Se=!0,e={action:n,next:null},null===ke&&(ke=new Map),void 0===(n=ke.get(t)))ke.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}}function Pe(){throw Error(o(394))}function Me(){}var De={readContext:function(e){return e._currentValue2},useContext:function(e){return Te(),e._currentValue2},useMemo:Ne,useReducer:_e,useRef:function(e){ye=Te();var t=(be=Oe()).memoizedState;return null===t?(e={current:e},be.memoizedState=e):t},useState:function(e){return _e(Ae,e)},useInsertionEffect:Me,useLayoutEffect:function(){},useCallback:function(e,t){return Ne((function(){return e}),t)},useImperativeHandle:Me,useEffect:Me,useDebugValue:Me,useDeferredValue:function(e){return Te(),e},useTransition:function(){return Te(),[!1,Pe]},useId:function(){var e=ge.treeContext,t=e.overflow;e=((e=e.id)&~(1<<32-de(e)-1)).toString(32)+t;var n=Ie;if(null===n)throw Error(o(404));return t=we++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Te(),t(e._source)},useSyncExternalStore:function(e,t,n){if(void 0===n)throw Error(o(407));return n()}},Ie=null,Le=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function je(e){return console.error(e),null}function Be(){}function ze(e,t,n,r,o,a,i,l){e.allPendingTasks++,null===n?e.pendingRootTasks++:n.pendingTasks++;var u={node:t,ping:function(){var t=e.pingedTasks;t.push(u),1===t.length&&tt(e)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:a,context:i,treeContext:l};return o.add(u),u}function He(e,t,n,r,o,a){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:a}}function Ue(e,t){if(null!=(e=e.onError(t))&&"string"!=typeof e)throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function Ve(e,t){var n=e.onShellError;n(t),(n=e.onFatalError)(t),null!==e.destination?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function qe(e,t,n,r,o){for(ye={},ge=t,we=0,e=n(r,o);Se;)Se=!1,we=0,Ee+=1,be=null,e=n(r,o);return Re(),e}function $e(e,t,n,r){var a=n.render(),i=r.childContextTypes;if(null!=i){var l=t.legacyContext;if("function"!=typeof n.getChildContext)r=l;else{for(var u in n=n.getChildContext())if(!(u in i))throw Error(o(108,K(r)||"Unknown",u));r=M({},l,n)}t.legacyContext=r,Xe(e,t,a),t.legacyContext=l}else Xe(e,t,a)}function We(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function Ge(e,t,n,i,l){if("function"==typeof n)if(n.prototype&&n.prototype.isReactComponent){l=ee(n,t.legacyContext);var u=n.contextType;se(u=new n(i,"object"==typeof u&&null!==u?u._currentValue2:l),n,i,l),$e(e,t,u,n)}else{l=qe(e,t,n,i,u=ee(n,t.legacyContext));var c=0!==we;if("object"==typeof l&&null!==l&&"function"==typeof l.render&&void 0===l.$$typeof)se(l,n,i,u),$e(e,t,l,n);else if(c){i=t.treeContext,t.treeContext=fe(i,1,0);try{Xe(e,t,l)}finally{t.treeContext=i}}else Xe(e,t,l)}else{if("string"!=typeof n){switch(n){case Y:case X:case j:case B:case L:case q:return void Xe(e,t,i.children);case G:throw Error(o(343));case V:e:{n=t.blockedBoundary,l=t.blockedSegment,u=i.fallback,i=i.children;var f={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:c=new Set,errorDigest:null},d=He(0,l.chunks.length,f,l.formatContext,!1,!1);l.children.push(d),l.lastPushedText=!1;var p=He(0,0,null,l.formatContext,!1,!1);p.parentFlushed=!0,t.blockedBoundary=f,t.blockedSegment=p;try{if(Ze(e,t,i),e.responseState.generateStaticMarkup||p.lastPushedText&&p.textEmbedded&&p.chunks.push("\x3c!-- --\x3e"),p.status=1,Qe(f,p),0===f.pendingTasks)break e}catch(t){p.status=4,f.forceClientRender=!0,f.errorDigest=Ue(e,t)}finally{t.blockedBoundary=n,t.blockedSegment=l}t=ze(e,u,n,d,c,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if("object"==typeof n&&null!==n)switch(n.$$typeof){case U:if(i=qe(e,t,n.render,i,l),0!==we){n=t.treeContext,t.treeContext=fe(n,1,0);try{Xe(e,t,i)}finally{t.treeContext=n}}else Xe(e,t,i);return;case $:return void Ge(e,t,n=n.type,i=We(n,i),l);case z:if(l=i.children,n=n._context,i=i.value,u=n._currentValue2,n._currentValue2=i,te=i={parent:c=te,depth:null===c?0:c.depth+1,context:n,parentValue:u,value:i},t.context=i,Xe(e,t,l),null===(e=te))throw Error(o(403));return i=e.parentValue,e.context._currentValue2=i===Z?e.context._defaultValue:i,e=te=e.parent,void(t.context=e);case H:return void Xe(e,t,i=(i=i.children)(n._currentValue2));case W:return void Ge(e,t,n=(l=n._init)(n._payload),i=We(n,i),void 0)}throw Error(o(130,null==n?n:typeof n,""))}switch(u=function(e,t,n,i,l){switch(t){case"select":e.push(A("select"));var u=null,c=null;for(h in n)if(a.call(n,h)){var f=n[h];if(null!=f)switch(h){case"children":u=f;break;case"dangerouslySetInnerHTML":c=f;break;case"defaultValue":case"value":break;default:E(e,i,h,f)}}return e.push(">"),T(e,c,u),u;case"option":c=l.selectedValue,e.push(A("option"));var d=f=null,p=null,h=null;for(u in n)if(a.call(n,u)){var m=n[u];if(null!=m)switch(u){case"children":f=m;break;case"selected":p=m;break;case"dangerouslySetInnerHTML":h=m;break;case"value":d=m;default:E(e,i,u,m)}}if(null!=c)if(n=null!==d?""+d:function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(f),x(c)){for(i=0;i<c.length;i++)if(""+c[i]===n){e.push(' selected=""');break}}else""+c===n&&e.push(' selected=""');else p&&e.push(' selected=""');return e.push(">"),T(e,h,f),f;case"textarea":for(f in e.push(A("textarea")),h=c=u=null,n)if(a.call(n,f)&&null!=(d=n[f]))switch(f){case"children":h=d;break;case"value":u=d;break;case"defaultValue":c=d;break;case"dangerouslySetInnerHTML":throw Error(o(91));default:E(e,i,f,d)}if(null===u&&null!==c&&(u=c),e.push(">"),null!=h){if(null!=u)throw Error(o(92));if(x(h)&&1<h.length)throw Error(o(93));u=""+h}return"string"==typeof u&&"\n"===u[0]&&e.push("\n"),null!==u&&e.push(g(""+u)),null;case"input":for(c in e.push(A("input")),d=h=f=u=null,n)if(a.call(n,c)&&null!=(p=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(399,"input"));case"defaultChecked":d=p;break;case"defaultValue":f=p;break;case"checked":h=p;break;case"value":u=p;break;default:E(e,i,c,p)}return null!==h?E(e,i,"checked",h):null!==d&&E(e,i,"checked",d),null!==u?E(e,i,"value",u):null!==f&&E(e,i,"value",f),e.push("/>"),null;case"menuitem":for(var y in e.push(A("menuitem")),n)if(a.call(n,y)&&null!=(u=n[y]))switch(y){case"children":case"dangerouslySetInnerHTML":throw Error(o(400));default:E(e,i,y,u)}return e.push(">"),null;case"title":for(m in e.push(A("title")),u=null,n)if(a.call(n,m)&&null!=(c=n[m]))switch(m){case"children":u=c;break;case"dangerouslySetInnerHTML":throw Error(o(434));default:E(e,i,m,c)}return e.push(">"),u;case"listing":case"pre":for(d in e.push(A(t)),c=u=null,n)if(a.call(n,d)&&null!=(f=n[d]))switch(d){case"children":u=f;break;case"dangerouslySetInnerHTML":c=f;break;default:E(e,i,d,f)}if(e.push(">"),null!=c){if(null!=u)throw Error(o(60));if("object"!=typeof c||!("__html"in c))throw Error(o(61));null!=(n=c.__html)&&("string"==typeof n&&0<n.length&&"\n"===n[0]?e.push("\n",n):e.push(""+n))}return"string"==typeof u&&"\n"===u[0]&&e.push("\n"),u;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":for(var v in e.push(A(t)),n)if(a.call(n,v)&&null!=(u=n[v]))switch(v){case"children":case"dangerouslySetInnerHTML":throw Error(o(399,t));default:E(e,i,v,u)}return e.push("/>"),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return C(e,n,t,i);case"html":return 0===l.insertionMode&&e.push("<!DOCTYPE html>"),C(e,n,t,i);default:if(-1===t.indexOf("-")&&"string"!=typeof n.is)return C(e,n,t,i);for(p in e.push(A(t)),c=u=null,n)if(a.call(n,p)&&null!=(f=n[p]))switch(p){case"children":u=f;break;case"dangerouslySetInnerHTML":c=f;break;case"style":k(e,i,f);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:s(p)&&"function"!=typeof f&&"symbol"!=typeof f&&e.push(" ",p,'="',g(f),'"')}return e.push(">"),T(e,c,u),u}}((l=t.blockedSegment).chunks,n,i,e.responseState,l.formatContext),l.lastPushedText=!1,c=l.formatContext,l.formatContext=function(e,t,n){switch(t){case"select":return S(1,null!=n.value?n.value:n.defaultValue);case"svg":return S(2,null);case"math":return S(3,null);case"foreignObject":return S(1,null);case"table":return S(4,null);case"thead":case"tbody":case"tfoot":return S(5,null);case"colgroup":return S(7,null);case"tr":return S(6,null)}return 4<=e.insertionMode||0===e.insertionMode?S(1,null):e}(c,n,i),Ze(e,t,u),l.formatContext=c,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:l.chunks.push("</",n,">")}l.lastPushedText=!1}}function Xe(e,t,n){if(t.node=n,"object"==typeof n&&null!==n){switch(n.$$typeof){case D:return void Ge(e,t,n.type,n.props,n.ref);case I:throw Error(o(257));case W:var r=n._init;return void Xe(e,t,n=r(n._payload))}if(x(n))return void Ye(e,t,n);if((r=null===n||"object"!=typeof n?null:"function"==typeof(r=J&&n[J]||n["@@iterator"])?r:null)&&(r=r.call(n))){if(!(n=r.next()).done){var a=[];do{a.push(n.value),n=r.next()}while(!n.done);Ye(e,t,a)}return}throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}"string"==typeof n?(r=t.blockedSegment).lastPushedText=P(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText):"number"==typeof n&&((r=t.blockedSegment).lastPushedText=P(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function Ye(e,t,n){for(var r=n.length,o=0;o<r;o++){var a=t.treeContext;t.treeContext=fe(a,r,o);try{Ze(e,t,n[o])}finally{t.treeContext=a}}}function Ze(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,a=t.context;try{return Xe(e,t,n)}catch(u){if(Re(),"object"!=typeof u||null===u||"function"!=typeof u.then)throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,le(a),u;n=u;var i=t.blockedSegment,l=He(0,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(l),i.lastPushedText=!1,e=ze(e,t.node,t.blockedBoundary,l,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,le(a)}}function Je(e){var t=e.blockedBoundary;(e=e.blockedSegment).status=3,et(this,t,e)}function Ke(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,null===r?(t.allPendingTasks--,2!==t.status&&(t.status=2,null!==t.destination&&t.destination.push(null))):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,e=void 0===n?Error(o(432)):n,r.errorDigest=t.onError(e),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach((function(e){return Ke(e,t,n)})),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,0===t.allPendingTasks&&(r=t.onAllReady)())}function Qe(e,t){if(0===t.chunks.length&&1===t.children.length&&null===t.children[0].boundary){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,1===n.status&&Qe(e,n)}else e.completedSegments.push(t)}function et(e,t,n){if(null===t){if(n.parentFlushed){if(null!==e.completedRootSegment)throw Error(o(389));e.completedRootSegment=n}e.pendingRootTasks--,0===e.pendingRootTasks&&(e.onShellError=Be,(t=e.onShellReady)())}else t.pendingTasks--,t.forceClientRender||(0===t.pendingTasks?(n.parentFlushed&&1===n.status&&Qe(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Je,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&1===n.status&&(Qe(t,n),1===t.completedSegments.length&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,0===e.allPendingTasks&&(e=e.onAllReady)()}function tt(e){if(2!==e.status){var t=te,n=Le.current;Le.current=De;var r=Ie;Ie=e.responseState;try{var o,a=e.pingedTasks;for(o=0;o<a.length;o++){var i=a[o],l=e,u=i.blockedSegment;if(0===u.status){le(i.context);try{Xe(l,i,i.node),l.responseState.generateStaticMarkup||u.lastPushedText&&u.textEmbedded&&u.chunks.push("\x3c!-- --\x3e"),i.abortSet.delete(i),u.status=1,et(l,i.blockedBoundary,u)}catch(e){if(Re(),"object"==typeof e&&null!==e&&"function"==typeof e.then){var s=i.ping;e.then(s,s)}else{i.abortSet.delete(i),u.status=4;var c=i.blockedBoundary,f=e,d=Ue(l,f);null===c?Ve(l,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&l.clientRenderedBoundaries.push(c))),l.allPendingTasks--,0===l.allPendingTasks&&(0,l.onAllReady)()}}}}a.splice(0,o),null!==e.destination&&lt(e,e.destination)}catch(t){Ue(e,t),Ve(e,t)}finally{Ie=r,Le.current=n,n===De&&le(t)}}}function nt(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,t.push('<template id="'),t.push(e.placeholderPrefix),e=r.toString(16),t.push(e),t.push('"></template>');case 1:n.status=2;var a=!0;r=n.chunks;var i=0;n=n.children;for(var l=0;l<n.length;l++){for(a=n[l];i<a.index;i++)t.push(r[i]);a=rt(e,t,a)}for(;i<r.length-1;i++)t.push(r[i]);return i<r.length&&(a=t.push(r[i])),a;default:throw Error(o(390))}}function rt(e,t,n){var r=n.boundary;if(null===r)return nt(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)return e.responseState.generateStaticMarkup||(r=r.errorDigest,t.push("\x3c!--$!--\x3e"),t.push("<template"),r&&(t.push(' data-dgst="'),r=g(r),t.push(r),t.push('"')),t.push("></template>")),nt(e,t,n),!!e.responseState.generateStaticMarkup||t.push("\x3c!--/$--\x3e");if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var a=e.responseState,i=a.nextSuspenseID++;return a=a.boundaryPrefix+i.toString(16),r=r.id=a,_(t,e.responseState,r),nt(e,t,n),t.push("\x3c!--/$--\x3e")}if(r.byteSize>e.progressiveChunkSize)return r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),_(t,e.responseState,r.id),nt(e,t,n),t.push("\x3c!--/$--\x3e");if(e.responseState.generateStaticMarkup||t.push("\x3c!--$--\x3e"),1!==(n=r.completedSegments).length)throw Error(o(391));return rt(e,t,n[0]),!!e.responseState.generateStaticMarkup||t.push("\x3c!--/$--\x3e")}function ot(e,t,n){return function(e,t,n,r){switch(n.insertionMode){case 0:case 1:return e.push('<div hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 2:return e.push('<svg aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 3:return e.push('<math aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 4:return e.push('<table hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 5:return e.push('<table hidden><tbody id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 6:return e.push('<table hidden><tr id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 7:return e.push('<table hidden><colgroup id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');default:throw Error(o(397))}}(t,e.responseState,n.formatContext,n.id),rt(e,t,n),function(e,t){switch(t.insertionMode){case 0:case 1:return e.push("</div>");case 2:return e.push("</svg>");case 3:return e.push("</math>");case 4:return e.push("</table>");case 5:return e.push("</tbody></table>");case 6:return e.push("</tr></table>");case 7:return e.push("</colgroup></table>");default:throw Error(o(397))}}(t,n.formatContext)}function at(e,t,n){for(var r=n.completedSegments,a=0;a<r.length;a++)it(e,t,n,r[a]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,t.push(e.startInlineScript),e.sentCompleteBoundaryFunction?t.push('$RC("'):(e.sentCompleteBoundaryFunction=!0,t.push('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("')),null===r)throw Error(o(395));return n=n.toString(16),t.push(r),t.push('","'),t.push(e.segmentPrefix),t.push(n),t.push('")<\/script>')}function it(e,t,n,r){if(2===r.status)return!0;var a=r.id;if(-1===a){if(-1===(r.id=n.rootSegmentID))throw Error(o(392));return ot(e,t,r)}return ot(e,t,r),e=e.responseState,t.push(e.startInlineScript),e.sentCompleteSegmentFunction?t.push('$RS("'):(e.sentCompleteSegmentFunction=!0,t.push('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("')),t.push(e.segmentPrefix),a=a.toString(16),t.push(a),t.push('","'),t.push(e.placeholderPrefix),t.push(a),t.push('")<\/script>')}function lt(e,t){try{var n=e.completedRootSegment;if(null!==n&&0===e.pendingRootTasks){rt(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)t.push(r[n]);n<r.length&&t.push(r[n])}var a,i=e.clientRenderedBoundaries;for(a=0;a<i.length;a++){var l=i[a];r=t;var u=e.responseState,s=l.id,c=l.errorDigest,f=l.errorMessage,d=l.errorComponentStack;if(r.push(u.startInlineScript),u.sentClientRenderFunction?r.push('$RX("'):(u.sentClientRenderFunction=!0,r.push('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("')),null===s)throw Error(o(395));if(r.push(s),r.push('"'),c||f||d){r.push(",");var p=F(c||"");r.push(p)}if(f||d){r.push(",");var h=F(f||"");r.push(h)}if(d){r.push(",");var m=F(d);r.push(m)}if(!r.push(")<\/script>"))return e.destination=null,a++,void i.splice(0,a)}i.splice(0,a);var y=e.completedBoundaries;for(a=0;a<y.length;a++)if(!at(e,t,y[a]))return e.destination=null,a++,void y.splice(0,a);y.splice(0,a);var g=e.partialBoundaries;for(a=0;a<g.length;a++){var v=g[a];e:{i=e,l=t;var b=v.completedSegments;for(u=0;u<b.length;u++)if(!it(i,l,v,b[u])){u++,b.splice(0,u);var x=!1;break e}b.splice(0,u),x=!0}if(!x)return e.destination=null,a++,void g.splice(0,a)}g.splice(0,a);var S=e.completedBoundaries;for(a=0;a<S.length;a++)if(!at(e,t,S[a]))return e.destination=null,a++,void S.splice(0,a);S.splice(0,a)}finally{0===e.allPendingTasks&&0===e.pingedTasks.length&&0===e.clientRenderedBoundaries.length&&0===e.completedBoundaries.length&&t.push(null)}}function ut(e,t){try{var n=e.abortableTasks;n.forEach((function(n){return Ke(n,e,t)})),n.clear(),null!==e.destination&&lt(e,e.destination)}catch(t){Ue(e,t),Ve(e,t)}}function st(){}function ct(e,t,n,r){var a=!1,i=null,l="",u={push:function(e){return null!==e&&(l+=e),!0},destroy:function(e){a=!0,i=e}},s=!1;if(e=function(e,t,n,r,o,a,i,l,u){var s=[],c=new Set;return(n=He(t={destination:null,responseState:t,progressiveChunkSize:r,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:s,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:void 0===o?je:o,onAllReady:Be,onShellReady:void 0===i?Be:i,onShellError:Be,onFatalError:Be},0,null,n,!1,!1)).parentFlushed=!0,e=ze(t,e,null,n,c,Q,null,ce),s.push(e),t}(e,function(e,t){return{bootstrapChunks:[],startInlineScript:"<script>",placeholderPrefix:(t=void 0===t?"":t)+"P:",segmentPrefix:t+"S:",boundaryPrefix:t+"B:",idPrefix:t,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1,generateStaticMarkup:e}}(n,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,st,0,(function(){s=!0})),tt(e),ut(e,r),1===e.status)e.status=2,u.destroy(e.fatalError);else if(2!==e.status&&null===e.destination){e.destination=u;try{lt(e,u)}catch(t){Ue(e,t),Ve(e,t)}}if(a)throw i;if(!s)throw Error(o(426));return l}t.renderToNodeStream=function(){throw Error(o(207))},t.renderToStaticMarkup=function(e,t){return ct(e,t,!0,'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')},t.renderToStaticNodeStream=function(){throw Error(o(208))},t.renderToString=function(e,t){return ct(e,t,!1,'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')},t.version="18.2.0"},698:function(e,t,n){"use strict";var r=n(24);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=null,i=0;function l(e,t){if(0!==t.length)if(512<t.length)0<i&&(e.enqueue(new Uint8Array(a.buffer,0,i)),a=new Uint8Array(512),i=0),e.enqueue(t);else{var n=a.length-i;n<t.length&&(0===n?e.enqueue(a):(a.set(t.subarray(0,n),i),e.enqueue(a),t=t.subarray(n)),a=new Uint8Array(512),i=0),a.set(t,i),i+=t.length}}function u(e,t){return l(e,t),!0}function s(e){a&&0<i&&(e.enqueue(new Uint8Array(a.buffer,0,i)),a=null,i=0)}var c=new TextEncoder;function f(e){return c.encode(e)}function d(e){return c.encode(e)}function p(e,t){"function"==typeof e.error?e.error(t):e.close()}var h=Object.prototype.hasOwnProperty,m=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,y={},g={};function v(e){return!!h.call(g,e)||!h.call(y,e)&&(m.test(e)?g[e]=!0:(y[e]=!0,!1))}function b(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var x={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){x[e]=new b(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];x[t]=new b(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){x[e]=new b(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){x[e]=new b(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){x[e]=new b(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){x[e]=new b(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){x[e]=new b(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){x[e]=new b(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){x[e]=new b(e,5,!1,e.toLowerCase(),null,!1,!1)}));var S=/[\-:]([a-z])/g;function w(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(S,w);x[t]=new b(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(S,w);x[t]=new b(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(S,w);x[t]=new b(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){x[e]=new b(e,1,!1,e.toLowerCase(),null,!1,!1)})),x.xlinkHref=new b("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){x[e]=new b(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},E=["Webkit","ms","Moz","O"];Object.keys(k).forEach((function(e){E.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),k[t]=k[e]}))}));var T=/["'&<>]/;function C(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var t=T.exec(e);if(t){var n,r="",o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var O=/([A-Z])/g,R=/^ms-/,A=Array.isArray,_=d("<script>"),N=d("<\/script>"),F=d('<script src="'),P=d('<script type="module" src="'),M=d('" async=""><\/script>'),D=/(<\/|<)(s)(cript)/gi;function I(e,t,n,r){return t+("s"===n?"\\u0073":"\\u0053")+r}function L(e,t){return{insertionMode:e,selectedValue:t}}var j=d("\x3c!-- --\x3e");function B(e,t,n,r){return""===t?r:(r&&e.push(j),e.push(f(C(t))),!0)}var z=new Map,H=d(' style="'),U=d(":"),V=d(";");function q(e,t,n){if("object"!=typeof n)throw Error(o(62));for(var r in t=!0,n)if(h.call(n,r)){var a=n[r];if(null!=a&&"boolean"!=typeof a&&""!==a){if(0===r.indexOf("--")){var i=f(C(r));a=f(C((""+a).trim()))}else{i=r;var l=z.get(i);void 0!==l||(l=d(C(i.replace(O,"-$1").toLowerCase().replace(R,"-ms-"))),z.set(i,l)),i=l,a="number"==typeof a?0===a||h.call(k,r)?f(""+a):f(a+"px"):f(C((""+a).trim()))}t?(t=!1,e.push(H,i,U,a)):e.push(V,i,U,a)}}t||e.push(G)}var $=d(" "),W=d('="'),G=d('"'),X=d('=""');function Y(e,t,n,r){switch(n){case"style":return void q(e,t,r);case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])if(null!==(t=x.hasOwnProperty(n)?x[n]:null)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=f(t.attributeName),t.type){case 3:r&&e.push($,n,X);break;case 4:!0===r?e.push($,n,X):!1!==r&&e.push($,n,W,f(C(r)),G);break;case 5:isNaN(r)||e.push($,n,W,f(C(r)),G);break;case 6:!isNaN(r)&&1<=r&&e.push($,n,W,f(C(r)),G);break;default:t.sanitizeURL&&(r=""+r),e.push($,n,W,f(C(r)),G)}}else if(v(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if("data-"!==(t=n.toLowerCase().slice(0,5))&&"aria-"!==t)return}e.push($,f(n),W,f(C(r)),G)}}var Z=d(">"),J=d("/>");function K(e,t,n){if(null!=t){if(null!=n)throw Error(o(60));if("object"!=typeof t||!("__html"in t))throw Error(o(61));null!=(t=t.__html)&&e.push(f(""+t))}}var Q=d(' selected=""');function ee(e,t,n,r){e.push(oe(n));var o,a=n=null;for(o in t)if(h.call(t,o)){var i=t[o];if(null!=i)switch(o){case"children":n=i;break;case"dangerouslySetInnerHTML":a=i;break;default:Y(e,r,o,i)}}return e.push(Z),K(e,a,n),"string"==typeof n?(e.push(f(C(n))),null):n}var te=d("\n"),ne=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,re=new Map;function oe(e){var t=re.get(e);if(void 0===t){if(!ne.test(e))throw Error(o(65,e));t=d("<"+e),re.set(e,t)}return t}var ae=d("<!DOCTYPE html>");var ie=d("</"),le=d(">"),ue=d('<template id="'),se=d('"></template>'),ce=d("\x3c!--$--\x3e"),fe=d('\x3c!--$?--\x3e<template id="'),de=d('"></template>'),pe=d("\x3c!--$!--\x3e"),he=d("\x3c!--/$--\x3e"),me=d("<template"),ye=d('"'),ge=d(' data-dgst="');d(' data-msg="'),d(' data-stck="');var ve=d("></template>");function be(e,t,n){if(l(e,fe),null===n)throw Error(o(395));return l(e,n),u(e,de)}var xe=d('<div hidden id="'),Se=d('">'),we=d("</div>"),ke=d('<svg aria-hidden="true" style="display:none" id="'),Ee=d('">'),Te=d("</svg>"),Ce=d('<math aria-hidden="true" style="display:none" id="'),Oe=d('">'),Re=d("</math>"),Ae=d('<table hidden id="'),_e=d('">'),Ne=d("</table>"),Fe=d('<table hidden><tbody id="'),Pe=d('">'),Me=d("</tbody></table>"),De=d('<table hidden><tr id="'),Ie=d('">'),Le=d("</tr></table>"),je=d('<table hidden><colgroup id="'),Be=d('">'),ze=d("</colgroup></table>"),He=d('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'),Ue=d('$RS("'),Ve=d('","'),qe=d('")<\/script>'),$e=d('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'),We=d('$RC("'),Ge=d('","'),Xe=d('")<\/script>'),Ye=d('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'),Ze=d('$RX("'),Je=d('"'),Ke=d(")<\/script>"),Qe=d(","),et=/[<\u2028\u2029]/g;function tt(e){return JSON.stringify(e).replace(et,(function(e){switch(e){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}}))}var nt=Object.assign,rt=Symbol.for("react.element"),ot=Symbol.for("react.portal"),at=Symbol.for("react.fragment"),it=Symbol.for("react.strict_mode"),lt=Symbol.for("react.profiler"),ut=Symbol.for("react.provider"),st=Symbol.for("react.context"),ct=Symbol.for("react.forward_ref"),ft=Symbol.for("react.suspense"),dt=Symbol.for("react.suspense_list"),pt=Symbol.for("react.memo"),ht=Symbol.for("react.lazy"),mt=Symbol.for("react.scope"),yt=Symbol.for("react.debug_trace_mode"),gt=Symbol.for("react.legacy_hidden"),vt=Symbol.for("react.default_value"),bt=Symbol.iterator;function xt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case at:return"Fragment";case ot:return"Portal";case lt:return"Profiler";case it:return"StrictMode";case ft:return"Suspense";case dt:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case st:return(e.displayName||"Context")+".Consumer";case ut:return(e._context.displayName||"Context")+".Provider";case ct:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case pt:return null!==(t=e.displayName||null)?t:xt(e.type)||"Memo";case ht:t=e._payload,e=e._init;try{return xt(e(t))}catch(e){}}return null}var St={};function wt(e,t){if(!(e=e.contextTypes))return St;var n,r={};for(n in e)r[n]=t[n];return r}var kt=null;function Et(e,t){if(e!==t){e.context._currentValue=e.parentValue,e=e.parent;var n=t.parent;if(null===e){if(null!==n)throw Error(o(401))}else{if(null===n)throw Error(o(401));Et(e,n)}t.context._currentValue=t.value}}function Tt(e){e.context._currentValue=e.parentValue,null!==(e=e.parent)&&Tt(e)}function Ct(e){var t=e.parent;null!==t&&Ct(t),e.context._currentValue=e.value}function Ot(e,t){if(e.context._currentValue=e.parentValue,null===(e=e.parent))throw Error(o(402));e.depth===t.depth?Et(e,t):Ot(e,t)}function Rt(e,t){var n=t.parent;if(null===n)throw Error(o(402));e.depth===n.depth?Et(e,n):Rt(e,n),t.context._currentValue=t.value}function At(e){var t=kt;t!==e&&(null===t?Ct(e):null===e?Tt(t):t.depth===e.depth?Et(t,e):t.depth>e.depth?Ot(t,e):Rt(t,e),kt=e)}var _t={isMounted:function(){return!1},enqueueSetState:function(e,t){null!==(e=e._reactInternals).queue&&e.queue.push(t)},enqueueReplaceState:function(e,t){(e=e._reactInternals).replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function Nt(e,t,n,r){var o=void 0!==e.state?e.state:null;e.updater=_t,e.props=n,e.state=o;var a={queue:[],replace:!1};e._reactInternals=a;var i=t.contextType;if(e.context="object"==typeof i&&null!==i?i._currentValue:r,"function"==typeof(i=t.getDerivedStateFromProps)&&(o=null==(i=i(n,o))?o:nt({},o,i),e.state=o),"function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate&&("function"==typeof e.UNSAFE_componentWillMount||"function"==typeof e.componentWillMount))if(t=e.state,"function"==typeof e.componentWillMount&&e.componentWillMount(),"function"==typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),t!==e.state&&_t.enqueueReplaceState(e,e.state,null),null!==a.queue&&0<a.queue.length)if(t=a.queue,i=a.replace,a.queue=null,a.replace=!1,i&&1===t.length)e.state=t[0];else{for(a=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var l=t[i];null!=(l="function"==typeof l?l.call(e,a,n,r):l)&&(o?(o=!1,a=nt({},a,l)):nt(a,l))}e.state=a}else a.queue=null}var Ft={id:1,overflow:""};function Pt(e,t,n){var r=e.id;e=e.overflow;var o=32-Mt(r)-1;r&=~(1<<o),n+=1;var a=32-Mt(t)+o;if(30<a){var i=o-o%5;return a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,{id:1<<32-Mt(t)+o|n<<o|r,overflow:a+e}}return{id:1<<a|n<<o|r,overflow:e}}var Mt=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(Dt(e)/It|0)|0},Dt=Math.log,It=Math.LN2,Lt="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},jt=null,Bt=null,zt=null,Ht=null,Ut=!1,Vt=!1,qt=0,$t=null,Wt=0;function Gt(){if(null===jt)throw Error(o(321));return jt}function Xt(){if(0<Wt)throw Error(o(312));return{memoizedState:null,queue:null,next:null}}function Yt(){return null===Ht?null===zt?(Ut=!1,zt=Ht=Xt()):(Ut=!0,Ht=zt):null===Ht.next?(Ut=!1,Ht=Ht.next=Xt()):(Ut=!0,Ht=Ht.next),Ht}function Zt(){Bt=jt=null,Vt=!1,zt=null,Wt=0,Ht=$t=null}function Jt(e,t){return"function"==typeof t?t(e):t}function Kt(e,t,n){if(jt=Gt(),Ht=Yt(),Ut){var r=Ht.queue;if(t=r.dispatch,null!==$t&&void 0!==(n=$t.get(r))){$t.delete(r),r=Ht.memoizedState;do{r=e(r,n.action),n=n.next}while(null!==n);return Ht.memoizedState=r,[r,t]}return[Ht.memoizedState,t]}return e=e===Jt?"function"==typeof t?t():t:void 0!==n?n(t):t,Ht.memoizedState=e,e=(e=Ht.queue={last:null,dispatch:null}).dispatch=en.bind(null,jt,e),[Ht.memoizedState,e]}function Qt(e,t){if(jt=Gt(),t=void 0===t?null:t,null!==(Ht=Yt())){var n=Ht.memoizedState;if(null!==n&&null!==t){var r=n[1];e:if(null===r)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!Lt(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),Ht.memoizedState=[e,t],e}function en(e,t,n){if(25<=Wt)throw Error(o(301));if(e===jt)if(Vt=!0,e={action:n,next:null},null===$t&&($t=new Map),void 0===(n=$t.get(t)))$t.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}}function tn(){throw Error(o(394))}function nn(){}var rn={readContext:function(e){return e._currentValue},useContext:function(e){return Gt(),e._currentValue},useMemo:Qt,useReducer:Kt,useRef:function(e){jt=Gt();var t=(Ht=Yt()).memoizedState;return null===t?(e={current:e},Ht.memoizedState=e):t},useState:function(e){return Kt(Jt,e)},useInsertionEffect:nn,useLayoutEffect:function(){},useCallback:function(e,t){return Qt((function(){return e}),t)},useImperativeHandle:nn,useEffect:nn,useDebugValue:nn,useDeferredValue:function(e){return Gt(),e},useTransition:function(){return Gt(),[!1,tn]},useId:function(){var e=Bt.treeContext,t=e.overflow;e=((e=e.id)&~(1<<32-Mt(e)-1)).toString(32)+t;var n=on;if(null===n)throw Error(o(404));return t=qt++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Gt(),t(e._source)},useSyncExternalStore:function(e,t,n){if(void 0===n)throw Error(o(407));return n()}},on=null,an=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function ln(e){return console.error(e),null}function un(){}function sn(e,t,n,r,o,a,i,l){e.allPendingTasks++,null===n?e.pendingRootTasks++:n.pendingTasks++;var u={node:t,ping:function(){var t=e.pingedTasks;t.push(u),1===t.length&&En(e)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:a,context:i,treeContext:l};return o.add(u),u}function cn(e,t,n,r,o,a){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:a}}function fn(e,t){if(null!=(e=e.onError(t))&&"string"!=typeof e)throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function dn(e,t){var n=e.onShellError;n(t),(n=e.onFatalError)(t),null!==e.destination?(e.status=2,p(e.destination,t)):(e.status=1,e.fatalError=t)}function pn(e,t,n,r,o){for(jt={},Bt=t,qt=0,e=n(r,o);Vt;)Vt=!1,qt=0,Wt+=1,Ht=null,e=n(r,o);return Zt(),e}function hn(e,t,n,r){var a=n.render(),i=r.childContextTypes;if(null!=i){var l=t.legacyContext;if("function"!=typeof n.getChildContext)r=l;else{for(var u in n=n.getChildContext())if(!(u in i))throw Error(o(108,xt(r)||"Unknown",u));r=nt({},l,n)}t.legacyContext=r,gn(e,t,a),t.legacyContext=l}else gn(e,t,a)}function mn(e,t){if(e&&e.defaultProps){for(var n in t=nt({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function yn(e,t,n,a,i){if("function"==typeof n)if(n.prototype&&n.prototype.isReactComponent){i=wt(n,t.legacyContext);var l=n.contextType;Nt(l=new n(a,"object"==typeof l&&null!==l?l._currentValue:i),n,a,i),hn(e,t,l,n)}else{i=pn(e,t,n,a,l=wt(n,t.legacyContext));var u=0!==qt;if("object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof)Nt(i,n,a,l),hn(e,t,i,n);else if(u){a=t.treeContext,t.treeContext=Pt(a,1,0);try{gn(e,t,i)}finally{t.treeContext=a}}else gn(e,t,i)}else{if("string"!=typeof n){switch(n){case gt:case yt:case it:case lt:case at:case dt:return void gn(e,t,a.children);case mt:throw Error(o(343));case ft:e:{n=t.blockedBoundary,i=t.blockedSegment,l=a.fallback,a=a.children;var s={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:u=new Set,errorDigest:null},c=cn(0,i.chunks.length,s,i.formatContext,!1,!1);i.children.push(c),i.lastPushedText=!1;var d=cn(0,0,null,i.formatContext,!1,!1);d.parentFlushed=!0,t.blockedBoundary=s,t.blockedSegment=d;try{if(bn(e,t,a),d.lastPushedText&&d.textEmbedded&&d.chunks.push(j),d.status=1,wn(s,d),0===s.pendingTasks)break e}catch(t){d.status=4,s.forceClientRender=!0,s.errorDigest=fn(e,t)}finally{t.blockedBoundary=n,t.blockedSegment=i}t=sn(e,l,n,c,u,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if("object"==typeof n&&null!==n)switch(n.$$typeof){case ct:if(a=pn(e,t,n.render,a,i),0!==qt){n=t.treeContext,t.treeContext=Pt(n,1,0);try{gn(e,t,a)}finally{t.treeContext=n}}else gn(e,t,a);return;case pt:return void yn(e,t,n=n.type,a=mn(n,a),i);case ut:if(i=a.children,n=n._context,a=a.value,l=n._currentValue,n._currentValue=a,kt=a={parent:u=kt,depth:null===u?0:u.depth+1,context:n,parentValue:l,value:a},t.context=a,gn(e,t,i),null===(e=kt))throw Error(o(403));return a=e.parentValue,e.context._currentValue=a===vt?e.context._defaultValue:a,e=kt=e.parent,void(t.context=e);case st:return void gn(e,t,a=(a=a.children)(n._currentValue));case ht:return void yn(e,t,n=(i=n._init)(n._payload),a=mn(n,a),void 0)}throw Error(o(130,null==n?n:typeof n,""))}switch(l=function(e,t,n,a,i){switch(t){case"select":e.push(oe("select"));var l=null,u=null;for(p in n)if(h.call(n,p)){var s=n[p];if(null!=s)switch(p){case"children":l=s;break;case"dangerouslySetInnerHTML":u=s;break;case"defaultValue":case"value":break;default:Y(e,a,p,s)}}return e.push(Z),K(e,u,l),l;case"option":u=i.selectedValue,e.push(oe("option"));var c=s=null,d=null,p=null;for(l in n)if(h.call(n,l)){var m=n[l];if(null!=m)switch(l){case"children":s=m;break;case"selected":d=m;break;case"dangerouslySetInnerHTML":p=m;break;case"value":c=m;default:Y(e,a,l,m)}}if(null!=u)if(n=null!==c?""+c:function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(s),A(u)){for(a=0;a<u.length;a++)if(""+u[a]===n){e.push(Q);break}}else""+u===n&&e.push(Q);else d&&e.push(Q);return e.push(Z),K(e,p,s),s;case"textarea":for(s in e.push(oe("textarea")),p=u=l=null,n)if(h.call(n,s)&&null!=(c=n[s]))switch(s){case"children":p=c;break;case"value":l=c;break;case"defaultValue":u=c;break;case"dangerouslySetInnerHTML":throw Error(o(91));default:Y(e,a,s,c)}if(null===l&&null!==u&&(l=u),e.push(Z),null!=p){if(null!=l)throw Error(o(92));if(A(p)&&1<p.length)throw Error(o(93));l=""+p}return"string"==typeof l&&"\n"===l[0]&&e.push(te),null!==l&&e.push(f(C(""+l))),null;case"input":for(u in e.push(oe("input")),c=p=s=l=null,n)if(h.call(n,u)&&null!=(d=n[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(o(399,"input"));case"defaultChecked":c=d;break;case"defaultValue":s=d;break;case"checked":p=d;break;case"value":l=d;break;default:Y(e,a,u,d)}return null!==p?Y(e,a,"checked",p):null!==c&&Y(e,a,"checked",c),null!==l?Y(e,a,"value",l):null!==s&&Y(e,a,"value",s),e.push(J),null;case"menuitem":for(var y in e.push(oe("menuitem")),n)if(h.call(n,y)&&null!=(l=n[y]))switch(y){case"children":case"dangerouslySetInnerHTML":throw Error(o(400));default:Y(e,a,y,l)}return e.push(Z),null;case"title":for(m in e.push(oe("title")),l=null,n)if(h.call(n,m)&&null!=(u=n[m]))switch(m){case"children":l=u;break;case"dangerouslySetInnerHTML":throw Error(o(434));default:Y(e,a,m,u)}return e.push(Z),l;case"listing":case"pre":for(c in e.push(oe(t)),u=l=null,n)if(h.call(n,c)&&null!=(s=n[c]))switch(c){case"children":l=s;break;case"dangerouslySetInnerHTML":u=s;break;default:Y(e,a,c,s)}if(e.push(Z),null!=u){if(null!=l)throw Error(o(60));if("object"!=typeof u||!("__html"in u))throw Error(o(61));null!=(n=u.__html)&&("string"==typeof n&&0<n.length&&"\n"===n[0]?e.push(te,f(n)):e.push(f(""+n)))}return"string"==typeof l&&"\n"===l[0]&&e.push(te),l;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":for(var g in e.push(oe(t)),n)if(h.call(n,g)&&null!=(l=n[g]))switch(g){case"children":case"dangerouslySetInnerHTML":throw Error(o(399,t));default:Y(e,a,g,l)}return e.push(J),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return ee(e,n,t,a);case"html":return 0===i.insertionMode&&e.push(ae),ee(e,n,t,a);default:if(-1===t.indexOf("-")&&"string"!=typeof n.is)return ee(e,n,t,a);for(d in e.push(oe(t)),u=l=null,n)if(h.call(n,d)&&null!=(s=n[d]))switch(d){case"children":l=s;break;case"dangerouslySetInnerHTML":u=s;break;case"style":q(e,a,s);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:v(d)&&"function"!=typeof s&&"symbol"!=typeof s&&e.push($,f(d),W,f(C(s)),G)}return e.push(Z),K(e,u,l),l}}((i=t.blockedSegment).chunks,n,a,e.responseState,i.formatContext),i.lastPushedText=!1,u=i.formatContext,i.formatContext=function(e,t,n){switch(t){case"select":return L(1,null!=n.value?n.value:n.defaultValue);case"svg":return L(2,null);case"math":return L(3,null);case"foreignObject":return L(1,null);case"table":return L(4,null);case"thead":case"tbody":case"tfoot":return L(5,null);case"colgroup":return L(7,null);case"tr":return L(6,null)}return 4<=e.insertionMode||0===e.insertionMode?L(1,null):e}(u,n,a),bn(e,t,l),i.formatContext=u,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:i.chunks.push(ie,f(n),le)}i.lastPushedText=!1}}function gn(e,t,n){if(t.node=n,"object"==typeof n&&null!==n){switch(n.$$typeof){case rt:return void yn(e,t,n.type,n.props,n.ref);case ot:throw Error(o(257));case ht:var r=n._init;return void gn(e,t,n=r(n._payload))}if(A(n))return void vn(e,t,n);if((r=null===n||"object"!=typeof n?null:"function"==typeof(r=bt&&n[bt]||n["@@iterator"])?r:null)&&(r=r.call(n))){if(!(n=r.next()).done){var a=[];do{a.push(n.value),n=r.next()}while(!n.done);vn(e,t,a)}return}throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}"string"==typeof n?(r=t.blockedSegment).lastPushedText=B(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText):"number"==typeof n&&((r=t.blockedSegment).lastPushedText=B(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function vn(e,t,n){for(var r=n.length,o=0;o<r;o++){var a=t.treeContext;t.treeContext=Pt(a,r,o);try{bn(e,t,n[o])}finally{t.treeContext=a}}}function bn(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,a=t.context;try{return gn(e,t,n)}catch(u){if(Zt(),"object"!=typeof u||null===u||"function"!=typeof u.then)throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,At(a),u;n=u;var i=t.blockedSegment,l=cn(0,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(l),i.lastPushedText=!1,e=sn(e,t.node,t.blockedBoundary,l,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,At(a)}}function xn(e){var t=e.blockedBoundary;(e=e.blockedSegment).status=3,kn(this,t,e)}function Sn(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,null===r?(t.allPendingTasks--,2!==t.status&&(t.status=2,null!==t.destination&&t.destination.close())):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,e=void 0===n?Error(o(432)):n,r.errorDigest=t.onError(e),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach((function(e){return Sn(e,t,n)})),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,0===t.allPendingTasks&&(r=t.onAllReady)())}function wn(e,t){if(0===t.chunks.length&&1===t.children.length&&null===t.children[0].boundary){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,1===n.status&&wn(e,n)}else e.completedSegments.push(t)}function kn(e,t,n){if(null===t){if(n.parentFlushed){if(null!==e.completedRootSegment)throw Error(o(389));e.completedRootSegment=n}e.pendingRootTasks--,0===e.pendingRootTasks&&(e.onShellError=un,(t=e.onShellReady)())}else t.pendingTasks--,t.forceClientRender||(0===t.pendingTasks?(n.parentFlushed&&1===n.status&&wn(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(xn,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&1===n.status&&(wn(t,n),1===t.completedSegments.length&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,0===e.allPendingTasks&&(e=e.onAllReady)()}function En(e){if(2!==e.status){var t=kt,n=an.current;an.current=rn;var r=on;on=e.responseState;try{var o,a=e.pingedTasks;for(o=0;o<a.length;o++){var i=a[o],l=e,u=i.blockedSegment;if(0===u.status){At(i.context);try{gn(l,i,i.node),u.lastPushedText&&u.textEmbedded&&u.chunks.push(j),i.abortSet.delete(i),u.status=1,kn(l,i.blockedBoundary,u)}catch(e){if(Zt(),"object"==typeof e&&null!==e&&"function"==typeof e.then){var s=i.ping;e.then(s,s)}else{i.abortSet.delete(i),u.status=4;var c=i.blockedBoundary,f=e,d=fn(l,f);null===c?dn(l,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&l.clientRenderedBoundaries.push(c))),l.allPendingTasks--,0===l.allPendingTasks&&(0,l.onAllReady)()}}}}a.splice(0,o),null!==e.destination&&_n(e,e.destination)}catch(t){fn(e,t),dn(e,t)}finally{on=r,an.current=n,n===rn&&At(t)}}}function Tn(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,l(t,ue),l(t,e.placeholderPrefix),l(t,e=f(r.toString(16))),u(t,se);case 1:n.status=2;var a=!0;r=n.chunks;var i=0;n=n.children;for(var s=0;s<n.length;s++){for(a=n[s];i<a.index;i++)l(t,r[i]);a=Cn(e,t,a)}for(;i<r.length-1;i++)l(t,r[i]);return i<r.length&&(a=u(t,r[i])),a;default:throw Error(o(390))}}function Cn(e,t,n){var r=n.boundary;if(null===r)return Tn(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)r=r.errorDigest,u(t,pe),l(t,me),r&&(l(t,ge),l(t,f(C(r))),l(t,ye)),u(t,ve),Tn(e,t,n);else if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var a=e.responseState,i=a.nextSuspenseID++;a=d(a.boundaryPrefix+i.toString(16)),r=r.id=a,be(t,e.responseState,r),Tn(e,t,n)}else if(r.byteSize>e.progressiveChunkSize)r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),be(t,e.responseState,r.id),Tn(e,t,n);else{if(u(t,ce),1!==(n=r.completedSegments).length)throw Error(o(391));Cn(e,t,n[0])}return u(t,he)}function On(e,t,n){return function(e,t,n,r){switch(n.insertionMode){case 0:case 1:return l(e,xe),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Se);case 2:return l(e,ke),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Ee);case 3:return l(e,Ce),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Oe);case 4:return l(e,Ae),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,_e);case 5:return l(e,Fe),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Pe);case 6:return l(e,De),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Ie);case 7:return l(e,je),l(e,t.segmentPrefix),l(e,f(r.toString(16))),u(e,Be);default:throw Error(o(397))}}(t,e.responseState,n.formatContext,n.id),Cn(e,t,n),function(e,t){switch(t.insertionMode){case 0:case 1:return u(e,we);case 2:return u(e,Te);case 3:return u(e,Re);case 4:return u(e,Ne);case 5:return u(e,Me);case 6:return u(e,Le);case 7:return u(e,ze);default:throw Error(o(397))}}(t,n.formatContext)}function Rn(e,t,n){for(var r=n.completedSegments,a=0;a<r.length;a++)An(e,t,n,r[a]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,l(t,e.startInlineScript),e.sentCompleteBoundaryFunction?l(t,We):(e.sentCompleteBoundaryFunction=!0,l(t,$e)),null===r)throw Error(o(395));return n=f(n.toString(16)),l(t,r),l(t,Ge),l(t,e.segmentPrefix),l(t,n),u(t,Xe)}function An(e,t,n,r){if(2===r.status)return!0;var a=r.id;if(-1===a){if(-1===(r.id=n.rootSegmentID))throw Error(o(392));return On(e,t,r)}return On(e,t,r),l(t,(e=e.responseState).startInlineScript),e.sentCompleteSegmentFunction?l(t,Ue):(e.sentCompleteSegmentFunction=!0,l(t,He)),l(t,e.segmentPrefix),l(t,a=f(a.toString(16))),l(t,Ve),l(t,e.placeholderPrefix),l(t,a),u(t,qe)}function _n(e,t){a=new Uint8Array(512),i=0;try{var n=e.completedRootSegment;if(null!==n&&0===e.pendingRootTasks){Cn(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)l(t,r[n]);n<r.length&&u(t,r[n])}var c,d=e.clientRenderedBoundaries;for(c=0;c<d.length;c++){var p=d[c];r=t;var h=e.responseState,m=p.id,y=p.errorDigest,g=p.errorMessage,v=p.errorComponentStack;if(l(r,h.startInlineScript),h.sentClientRenderFunction?l(r,Ze):(h.sentClientRenderFunction=!0,l(r,Ye)),null===m)throw Error(o(395));if(l(r,m),l(r,Je),(y||g||v)&&(l(r,Qe),l(r,f(tt(y||"")))),(g||v)&&(l(r,Qe),l(r,f(tt(g||"")))),v&&(l(r,Qe),l(r,f(tt(v)))),!u(r,Ke))return e.destination=null,c++,void d.splice(0,c)}d.splice(0,c);var b=e.completedBoundaries;for(c=0;c<b.length;c++)if(!Rn(e,t,b[c]))return e.destination=null,c++,void b.splice(0,c);b.splice(0,c),s(t),a=new Uint8Array(512),i=0;var x=e.partialBoundaries;for(c=0;c<x.length;c++){var S=x[c];e:{d=e,p=t;var w=S.completedSegments;for(h=0;h<w.length;h++)if(!An(d,p,S,w[h])){h++,w.splice(0,h);var k=!1;break e}w.splice(0,h),k=!0}if(!k)return e.destination=null,c++,void x.splice(0,c)}x.splice(0,c);var E=e.completedBoundaries;for(c=0;c<E.length;c++)if(!Rn(e,t,E[c]))return e.destination=null,c++,void E.splice(0,c);E.splice(0,c)}finally{s(t),0===e.allPendingTasks&&0===e.pingedTasks.length&&0===e.clientRenderedBoundaries.length&&0===e.completedBoundaries.length&&t.close()}}function Nn(e,t){try{var n=e.abortableTasks;n.forEach((function(n){return Sn(n,e,t)})),n.clear(),null!==e.destination&&_n(e,e.destination)}catch(t){fn(e,t),dn(e,t)}}t.renderToReadableStream=function(e,t){return new Promise((function(n,r){var o,a,i=new Promise((function(e,t){a=e,o=t})),l=function(e,t,n,r,o,a,i,l,u){var s=[],c=new Set;return(n=cn(t={destination:null,responseState:t,progressiveChunkSize:void 0===r?12800:r,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:s,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:void 0===o?ln:o,onAllReady:void 0===a?un:a,onShellReady:void 0===i?un:i,onShellError:void 0===l?un:l,onFatalError:void 0===u?un:u},0,null,n,!1,!1)).parentFlushed=!0,e=sn(t,e,null,n,c,St,null,Ft),s.push(e),t}(e,function(e,t,n,r,o){e=void 0===e?"":e,t=void 0===t?_:d('<script nonce="'+C(t)+'">');var a=[];if(void 0!==n&&a.push(t,f((""+n).replace(D,I)),N),void 0!==r)for(n=0;n<r.length;n++)a.push(F,f(C(r[n])),M);if(void 0!==o)for(r=0;r<o.length;r++)a.push(P,f(C(o[r])),M);return{bootstrapChunks:a,startInlineScript:t,placeholderPrefix:d(e+"P:"),segmentPrefix:d(e+"S:"),boundaryPrefix:e+"B:",idPrefix:e,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1}}(t?t.identifierPrefix:void 0,t?t.nonce:void 0,t?t.bootstrapScriptContent:void 0,t?t.bootstrapScripts:void 0,t?t.bootstrapModules:void 0),function(e){return L("http://www.w3.org/2000/svg"===e?2:"http://www.w3.org/1998/Math/MathML"===e?3:0,null)}(t?t.namespaceURI:void 0),t?t.progressiveChunkSize:void 0,t?t.onError:void 0,a,(function(){var e=new ReadableStream({type:"bytes",pull:function(e){if(1===l.status)l.status=2,p(e,l.fatalError);else if(2!==l.status&&null===l.destination){l.destination=e;try{_n(l,e)}catch(e){fn(l,e),dn(l,e)}}},cancel:function(){Nn(l)}},{highWaterMark:0});e.allReady=i,n(e)}),(function(e){i.catch((function(){})),r(e)}),o);if(t&&t.signal){var u=t.signal,s=function(){Nn(l,u.reason),u.removeEventListener("abort",s)};u.addEventListener("abort",s)}En(l)}))},t.version="18.2.0"},745:function(e,t,n){"use strict";var r=n(314);t.s=r.createRoot,r.hydrateRoot},762:function(e,t,n){"use strict";var r,o;r=n(774),o=n(698),t.version=r.version,t.renderToString=r.renderToString,t.renderToStaticMarkup=r.renderToStaticMarkup,t.renderToNodeStream=r.renderToNodeStream,t.renderToStaticNodeStream=r.renderToStaticNodeStream,t.renderToReadableStream=o.renderToReadableStream},726:function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}Object.defineProperty(t,"__esModule",{value:!0});var a={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach((function(e){a[e]=new o(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t,n,i=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0],u=i[1];a[l]=new o(l,1,!1,u,null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){a[e]=new o(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){a[e]=new o(e,2,!1,e,null,!1,!1)})),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","disableRemotePlayback","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach((function(e){a[e]=new o(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){a[e]=new o(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){a[e]=new o(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){a[e]=new o(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){a[e]=new o(e,5,!1,e.toLowerCase(),null,!1,!1)}));var i=/[\-\:]([a-z])/g,l=function(e){return e[1].toUpperCase()};["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach((function(e){var t=e.replace(i,l);a[t]=new o(t,1,!1,e,null,!1,!1)})),["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach((function(e){var t=e.replace(i,l);a[t]=new o(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(i,l);a[t]=new o(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){a[e]=new o(e,1,!1,e.toLowerCase(),null,!1,!1)})),a.xlinkHref=new o("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){a[e]=new o(e,1,!1,e.toLowerCase(),null,!0,!0)}));var u=n(229),s=u.CAMELCASE,c=u.SAME,f=u.possibleStandardNames,d=RegExp.prototype.test.bind(new RegExp("^(data|aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$")),p=Object.keys(f).reduce((function(e,t){var n=f[t];return n===c?e[t]=t:n===s?e[t.toLowerCase()]=t:e[t]=n,e}),{});t.BOOLEAN=3,t.BOOLEANISH_STRING=2,t.NUMERIC=5,t.OVERLOADED_BOOLEAN=4,t.POSITIVE_NUMERIC=6,t.RESERVED=0,t.STRING=1,t.getPropertyInfo=function(e){return a.hasOwnProperty(e)?a[e]:null},t.isCustomAttribute=d,t.possibleStandardNames=p},229:function(e,t){t.SAME=0,t.CAMELCASE=1,t.possibleStandardNames={accept:0,acceptCharset:1,"accept-charset":"acceptCharset",accessKey:1,action:0,allowFullScreen:1,alt:0,as:0,async:0,autoCapitalize:1,autoComplete:1,autoCorrect:1,autoFocus:1,autoPlay:1,autoSave:1,capture:0,cellPadding:1,cellSpacing:1,challenge:0,charSet:1,checked:0,children:0,cite:0,class:"className",classID:1,className:1,cols:0,colSpan:1,content:0,contentEditable:1,contextMenu:1,controls:0,controlsList:1,coords:0,crossOrigin:1,dangerouslySetInnerHTML:1,data:0,dateTime:1,default:0,defaultChecked:1,defaultValue:1,defer:0,dir:0,disabled:0,disablePictureInPicture:1,disableRemotePlayback:1,download:0,draggable:0,encType:1,enterKeyHint:1,for:"htmlFor",form:0,formMethod:1,formAction:1,formEncType:1,formNoValidate:1,formTarget:1,frameBorder:1,headers:0,height:0,hidden:0,high:0,href:0,hrefLang:1,htmlFor:1,httpEquiv:1,"http-equiv":"httpEquiv",icon:0,id:0,innerHTML:1,inputMode:1,integrity:0,is:0,itemID:1,itemProp:1,itemRef:1,itemScope:1,itemType:1,keyParams:1,keyType:1,kind:0,label:0,lang:0,list:0,loop:0,low:0,manifest:0,marginWidth:1,marginHeight:1,max:0,maxLength:1,media:0,mediaGroup:1,method:0,min:0,minLength:1,multiple:0,muted:0,name:0,noModule:1,nonce:0,noValidate:1,open:0,optimum:0,pattern:0,placeholder:0,playsInline:1,poster:0,preload:0,profile:0,radioGroup:1,readOnly:1,referrerPolicy:1,rel:0,required:0,reversed:0,role:0,rows:0,rowSpan:1,sandbox:0,scope:0,scoped:0,scrolling:0,seamless:0,selected:0,shape:0,size:0,sizes:0,span:0,spellCheck:1,src:0,srcDoc:1,srcLang:1,srcSet:1,start:0,step:0,style:0,summary:0,tabIndex:1,target:0,title:0,type:0,useMap:1,value:0,width:0,wmode:0,wrap:0,about:0,accentHeight:1,"accent-height":"accentHeight",accumulate:0,additive:0,alignmentBaseline:1,"alignment-baseline":"alignmentBaseline",allowReorder:1,alphabetic:0,amplitude:0,arabicForm:1,"arabic-form":"arabicForm",ascent:0,attributeName:1,attributeType:1,autoReverse:1,azimuth:0,baseFrequency:1,baselineShift:1,"baseline-shift":"baselineShift",baseProfile:1,bbox:0,begin:0,bias:0,by:0,calcMode:1,capHeight:1,"cap-height":"capHeight",clip:0,clipPath:1,"clip-path":"clipPath",clipPathUnits:1,clipRule:1,"clip-rule":"clipRule",color:0,colorInterpolation:1,"color-interpolation":"colorInterpolation",colorInterpolationFilters:1,"color-interpolation-filters":"colorInterpolationFilters",colorProfile:1,"color-profile":"colorProfile",colorRendering:1,"color-rendering":"colorRendering",contentScriptType:1,contentStyleType:1,cursor:0,cx:0,cy:0,d:0,datatype:0,decelerate:0,descent:0,diffuseConstant:1,direction:0,display:0,divisor:0,dominantBaseline:1,"dominant-baseline":"dominantBaseline",dur:0,dx:0,dy:0,edgeMode:1,elevation:0,enableBackground:1,"enable-background":"enableBackground",end:0,exponent:0,externalResourcesRequired:1,fill:0,fillOpacity:1,"fill-opacity":"fillOpacity",fillRule:1,"fill-rule":"fillRule",filter:0,filterRes:1,filterUnits:1,floodOpacity:1,"flood-opacity":"floodOpacity",floodColor:1,"flood-color":"floodColor",focusable:0,fontFamily:1,"font-family":"fontFamily",fontSize:1,"font-size":"fontSize",fontSizeAdjust:1,"font-size-adjust":"fontSizeAdjust",fontStretch:1,"font-stretch":"fontStretch",fontStyle:1,"font-style":"fontStyle",fontVariant:1,"font-variant":"fontVariant",fontWeight:1,"font-weight":"fontWeight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:1,"glyph-name":"glyphName",glyphOrientationHorizontal:1,"glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphOrientationVertical:1,"glyph-orientation-vertical":"glyphOrientationVertical",glyphRef:1,gradientTransform:1,gradientUnits:1,hanging:0,horizAdvX:1,"horiz-adv-x":"horizAdvX",horizOriginX:1,"horiz-origin-x":"horizOriginX",ideographic:0,imageRendering:1,"image-rendering":"imageRendering",in2:0,in:0,inlist:0,intercept:0,k1:0,k2:0,k3:0,k4:0,k:0,kernelMatrix:1,kernelUnitLength:1,kerning:0,keyPoints:1,keySplines:1,keyTimes:1,lengthAdjust:1,letterSpacing:1,"letter-spacing":"letterSpacing",lightingColor:1,"lighting-color":"lightingColor",limitingConeAngle:1,local:0,markerEnd:1,"marker-end":"markerEnd",markerHeight:1,markerMid:1,"marker-mid":"markerMid",markerStart:1,"marker-start":"markerStart",markerUnits:1,markerWidth:1,mask:0,maskContentUnits:1,maskUnits:1,mathematical:0,mode:0,numOctaves:1,offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:1,"overline-position":"overlinePosition",overlineThickness:1,"overline-thickness":"overlineThickness",paintOrder:1,"paint-order":"paintOrder",panose1:0,"panose-1":"panose1",pathLength:1,patternContentUnits:1,patternTransform:1,patternUnits:1,pointerEvents:1,"pointer-events":"pointerEvents",points:0,pointsAtX:1,pointsAtY:1,pointsAtZ:1,prefix:0,preserveAlpha:1,preserveAspectRatio:1,primitiveUnits:1,property:0,r:0,radius:0,refX:1,refY:1,renderingIntent:1,"rendering-intent":"renderingIntent",repeatCount:1,repeatDur:1,requiredExtensions:1,requiredFeatures:1,resource:0,restart:0,result:0,results:0,rotate:0,rx:0,ry:0,scale:0,security:0,seed:0,shapeRendering:1,"shape-rendering":"shapeRendering",slope:0,spacing:0,specularConstant:1,specularExponent:1,speed:0,spreadMethod:1,startOffset:1,stdDeviation:1,stemh:0,stemv:0,stitchTiles:1,stopColor:1,"stop-color":"stopColor",stopOpacity:1,"stop-opacity":"stopOpacity",strikethroughPosition:1,"strikethrough-position":"strikethroughPosition",strikethroughThickness:1,"strikethrough-thickness":"strikethroughThickness",string:0,stroke:0,strokeDasharray:1,"stroke-dasharray":"strokeDasharray",strokeDashoffset:1,"stroke-dashoffset":"strokeDashoffset",strokeLinecap:1,"stroke-linecap":"strokeLinecap",strokeLinejoin:1,"stroke-linejoin":"strokeLinejoin",strokeMiterlimit:1,"stroke-miterlimit":"strokeMiterlimit",strokeWidth:1,"stroke-width":"strokeWidth",strokeOpacity:1,"stroke-opacity":"strokeOpacity",suppressContentEditableWarning:1,suppressHydrationWarning:1,surfaceScale:1,systemLanguage:1,tableValues:1,targetX:1,targetY:1,textAnchor:1,"text-anchor":"textAnchor",textDecoration:1,"text-decoration":"textDecoration",textLength:1,textRendering:1,"text-rendering":"textRendering",to:0,transform:0,typeof:0,u1:0,u2:0,underlinePosition:1,"underline-position":"underlinePosition",underlineThickness:1,"underline-thickness":"underlineThickness",unicode:0,unicodeBidi:1,"unicode-bidi":"unicodeBidi",unicodeRange:1,"unicode-range":"unicodeRange",unitsPerEm:1,"units-per-em":"unitsPerEm",unselectable:0,vAlphabetic:1,"v-alphabetic":"vAlphabetic",values:0,vectorEffect:1,"vector-effect":"vectorEffect",version:0,vertAdvY:1,"vert-adv-y":"vertAdvY",vertOriginX:1,"vert-origin-x":"vertOriginX",vertOriginY:1,"vert-origin-y":"vertOriginY",vHanging:1,"v-hanging":"vHanging",vIdeographic:1,"v-ideographic":"vIdeographic",viewBox:1,viewTarget:1,visibility:0,vMathematical:1,"v-mathematical":"vMathematical",vocab:0,widths:0,wordSpacing:1,"word-spacing":"wordSpacing",writingMode:1,"writing-mode":"writingMode",x1:0,x2:0,x:0,xChannelSelector:1,xHeight:1,"x-height":"xHeight",xlinkActuate:1,"xlink:actuate":"xlinkActuate",xlinkArcrole:1,"xlink:arcrole":"xlinkArcrole",xlinkHref:1,"xlink:href":"xlinkHref",xlinkRole:1,"xlink:role":"xlinkRole",xlinkShow:1,"xlink:show":"xlinkShow",xlinkTitle:1,"xlink:title":"xlinkTitle",xlinkType:1,"xlink:type":"xlinkType",xmlBase:1,"xml:base":"xmlBase",xmlLang:1,"xml:lang":"xmlLang",xmlns:0,"xml:space":"xmlSpace",xmlnsXlink:1,"xmlns:xlink":"xmlnsXlink",xmlSpace:1,y1:0,y2:0,y:0,yChannelSelector:1,z:0,zoomAndPan:1}},476:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};t.__esModule=!0;var o=r(n(848)),a=n(678);t.default=function(e,t){var n={};return e&&"string"==typeof e?((0,o.default)(e,(function(e,r){e&&r&&(n[(0,a.camelCase)(e,t)]=r)})),n):n}},678:function(e,t){"use strict";t.__esModule=!0,t.camelCase=void 0;var n=/^--[a-zA-Z0-9-]+$/,r=/-([a-z])/g,o=/^[^-]+$/,a=/^-(webkit|moz|ms|o|khtml)-/,i=/^-(ms)-/,l=function(e,t){return t.toUpperCase()},u=function(e,t){return"".concat(t,"-")};t.camelCase=function(e,t){return void 0===t&&(t={}),function(e){return!e||o.test(e)||n.test(e)}(e)?e:(e=e.toLowerCase(),(e=t.reactCompat?e.replace(i,u):e.replace(a,u)).replace(r,l))}},848:function(e,t,n){var r=n(139);function o(e,t){var n,o=null;if(!e||"string"!=typeof e)return o;for(var a,i,l=r(e),u="function"==typeof t,s=0,c=l.length;s<c;s++)a=(n=l[s]).property,i=n.value,u?t(a,i,n):i&&(o||(o={}),o[a]=i);return o}e.exports=o,e.exports.default=o},24:function(t){"use strict";t.exports=e},314:function(e){"use strict";e.exports=t}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e].call(a.exports,a,a.exports,o),a.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return function(){"use strict";o.r(a),o.d(a,{init:function(){return L}});var e=o(24),t=o.n(e),n=o(762),r=o(488),i=(r.domToReact,r.htmlToDOM,r.attributesToProps,r.Comment,r.Element,r.ProcessingInstruction,r.Text,r),l=o(856),u=o.n(l);function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var c=function(e){var n,r,o=(n=t().useState(null),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];return t().useEffect((function(){var t=document.querySelector(e);i(t)}),[]),{element:a}};function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var d=function(e){var n,r,o=c("#".concat(e)).element,a=(n=t().useState([]),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],l=a[1],u=new MutationObserver((function(t){t.forEach((function(t){if("attributes"===t.type){var n=null==t?void 0:t.attributeName;if(e===n){var r,o=null===(r=t.target)||void 0===r?void 0:r.getAttribute(n);l(JSON.parse(o))}}}))}));return t().useEffect((function(){o&&u.observe(o,{attributes:!0})}),[o]),{data:i}},p=function(e,n){var r=t().useRef(!0);t().useEffect((function(){var t=function(){};if(r.current?r.current=!1:t=e(),t&&"function"==typeof t)return t}),n)};function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function m(){m=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new O(o||[]);return r(i,"_invoke",{value:k(e,n,l)}),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function y(){}var g={};u(g,a,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(R([])));b&&b!==t&&n.call(b,a)&&(g=b);var x=y.prototype=d.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=c(e[r],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==h(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function k(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=E(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function E(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function R(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:A}}function A(){return{value:void 0,done:!0}}return p.prototype=y,r(x,"constructor",{value:y,configurable:!0}),r(y,"constructor",{value:p,configurable:!0}),p.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(s(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),u(x,l,"Generator"),u(x,a,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=R,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:R(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function b(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){v(a,r,o,i,l,"next",e)}function l(e){v(a,r,o,i,l,"throw",e)}i(void 0)}))}}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function w(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==h(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==h(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===h(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E.apply(this,arguments)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var C=function(e){var n,r,o,a,i,l=e.forwardRef,u=e.url,s=e.dataAttr,c=function(e,n){var r,o,a,i=function(e,t){var n;return(w(n={},"arrayBuffer",(function(){return e.arrayBuffer()})),w(n,"blob",(function(){return e.blob()})),w(n,"formData",(function(){return e.formData()})),w(n,"json",(function(){return e.json()})),w(n,"text",(function(){return e.text()})),n)[t||"json"]()},l=function(e,t){return"json"===t||void 0===t?JSON.stringify(e):e},u=x(t().useState((function(){return null==n?void 0:n.interceptor})),1)[0],s=x(t().useState(null!=n&&n.method?n.method:"GET"),2),c=s[0],f=s[1],d=x(t().useState(l(null==n?void 0:n.body,null==n?void 0:n.bodyType)),2),h=d[0],y=d[1],v=x(t().useState(null==n?void 0:n.headers),2),S=v[0],k=v[1],E=t().useState(S?Object.fromEntries(null===(r=Object.entries(S))||void 0===r?void 0:r.filter((function(e){var t=x(e,2),n=t[0];return t[1],"Content-Type"!==n}))):S),T=x(E,1)[0],C=x(t().useState(void 0!==(null==n?void 0:n.timeout)?n.timeout:2e4),1)[0],O=x(t().useState([]),2),R=O[0],A=O[1],_=x(t().useState(e),2),N=_[0],F=_[1],P=x(t().useState(""),2),M=P[0],D=P[1],I=x(t().useState(null==n?void 0:n.defaultRes),2),L=I[0],j=I[1],B=x(t().useState(null),2),z=B[0],H=B[1],U=x(t().useState(!1),2),V=U[0],q=U[1],$=x(t().useState(new AbortController),2),W=$[0],G=$[1],X=function(){var e=b(m().mark((function e(t){var r,o,a;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="POST"===(null==t?void 0:t.method)?T:S,o=fetch("".concat(N).concat(t.route?t.route:""),g(g({},n),{},{signal:null==t?void 0:t.signal,method:null==t?void 0:t.method,body:null==t?void 0:t.body,headers:r})),e.next=4,o;case 4:return a=e.sent,e.abrupt("return",a);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Y=function(){var t=b(m().mark((function t(r){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!u){t.next=4;break}return t.next=3,u(e,n);case 3:case 4:return t.abrupt("return",X(r));case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Z={get:(a=b(m().mark((function e(t,n){var r,o;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Y({route:t,method:"GET"});case 2:return r=e.sent,e.next=5,i(r,null!=n&&n.bodyType?n.bodyType:"json");case 5:return o=e.sent,e.abrupt("return",o);case 7:case"end":return e.stop()}}),e)}))),function(e,t){return a.apply(this,arguments)}),post:(o=b(m().mark((function e(t,n,r){var o,a;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Y({route:t,method:"POST",body:n});case 2:return o=e.sent,e.next=5,i(o,null!=r&&r.bodyType?r.bodyType:"json");case 5:return a=e.sent,e.abrupt("return",a);case 7:case"end":return e.stop()}}),e)}))),function(e,t,n){return o.apply(this,arguments)})},J=function(){var e;e="string"==typeof(null==n?void 0:n.fetchOnMount)?null==n?void 0:n.fetchOnMount:"",K(),f(null!=n&&n.method?null==n?void 0:n.method:"GET"),D(e||""),y(l(null==n?void 0:n.body,null==n?void 0:n.bodyType)),A([])},K=function(){return W.abort()},Q=function(e){if(null!=n&&n.modelResData&&e){var t=null!=n&&n.mapResDataTo?null==n?void 0:n.mapResDataTo:"mappedResult",r=n.modelResData(e);return g(g({},e),w({},t,r))}return e},ee=function(){var e=b(m().mark((function e(t){var r,o;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,q(!0),H(null),e.next=5,Y({route:M,method:c,signal:t,body:h,bodyType:null==n?void 0:n.bodyType});case 5:return r=e.sent,e.next=8,i(r,null!=n&&n.bodyType?n.bodyType:"json");case 8:o=e.sent,r.ok?(j(Q(o)),q(!1)):!1===r.ok&&(q(!1),(null==r?void 0:r.statusText.length)>0?H(null==r?void 0:r.statusText):H("Server returned status ".concat(null==r?void 0:r.status))),e.next=17;break;case 12:e.prev=12,e.t0=e.catch(0),H(e.t0),q(!1),console.error(e.t0);case 17:case"end":return e.stop()}}),e,null,[[0,12]])})));return function(t){return e.apply(this,arguments)}}();return p((function(){var e=new AbortController;return G(e),ee(e.signal),"number"==typeof C&&setTimeout((function(){e.abort(),null!=n&&n.onTimeout&&n.onTimeout()}),C),function(){e.abort()}}),[R]),p((function(){F(N)}),[N]),p((function(){k(null==n?void 0:n.headers),y(l(null==n?void 0:n.body,null==n?void 0:n.bodyType))}),[null==n?void 0:n.body,null==n?void 0:n.headers]),t().useEffect((function(){null!=n&&n.onMount&&(null==n||n.onMount()),null!=n&&n.fetchOnMount&&("string"==typeof(null==n?void 0:n.fetchOnMount)&&D(null==n?void 0:n.fetchOnMount),J())}),[]),{response:L,error:z,loading:V,fetchData:J,get:function(e){K(),f("GET"),D(e||""),y(l(null==n?void 0:n.body,null==n?void 0:n.bodyType)),A([])},post:function(e,t){K(),f("POST"),D(e),y(l(t||(null==n?void 0:n.body),null==n?void 0:n.bodyType)),A([])},abort:K,request:Z}}(u,{fetchOnMount:!0}).response,f=(n=t().useState("[]"),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return T(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=f[0],h=f[1];return t().useEffect((function(){h(JSON.stringify(c))}),[c]),t().createElement(t().Fragment,null,t().createElement("div",E({ref:l,id:s,className:"d-none"},(o={},i=d,(a=function(e){var t=function(e,t){if("object"!==k(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===k(t)?t:String(t)}(a=s))in o?Object.defineProperty(o,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):o[a]=i,o))))},O=function(e){var r,o,a,l,s=e.content,c=(e.bindData,e.fallBackBindData),f=e.type,p=e.error,h=e.loading,m=(a="data-sc-account",l=t().useRef(null),{Account:{dataAttr:a,DataComp:function(){return t().createElement(C,{forwardRef:l,url:"https://jsonplaceholder.typicode.com/users",dataAttr:a})},set:function(e){if(null!=e){var t,n="string"==typeof e?e:JSON.stringify(e);null==l||null===(t=l.current)||void 0===t||t.setAttribute(a,n)}},get:function(){var e,t=null==l||null===(e=l.current)||void 0===e?void 0:e.getAttribute(a);return"string"==typeof t?JSON.parse(t):t}}}),y=d(m.Account.dataAttr),g={htmlFrom:function(e,t){if(null!=t&&t.bindData){var n=r(e,null==t?void 0:t.bindData,null!=t&&t.fallBackBindData?null==t?void 0:t.fallBackBindData:null==t?void 0:t.bindData);return o(n)}return o(e)},placeHolderHTMLFrom:function(e,t){var n=e,r=new RegExp("{{([^{{}}]+)}}","g");return n=n.replace(r,t),o(n)},bindData:r=function(e,t,n){var r,o,a=e,i=null===(r=e.match(/{{([^{{}}]+)}}/g))||void 0===r||null===(o=r.map((function(e){return e.replace(/[{{}}]/g,"")})))||void 0===o?void 0:o.filter((function(e){return Object.hasOwn(t,e)}));return null==i||i.map((function(e){var r=t[e].length>0?t[e]:n[e],o=new RegExp("({{".concat(e,"}})"),"g");a=a.replace(o,r)})),a},parseHTMLString:o=function(e){var t=u().sanitize(e,{USE_PROFILES:{html:!0}});return i(t)},JSXToHTML:function(e,t){return e&&void 0!==t?n.renderToStaticMarkup(e(t)):""}};return t().createElement(t().Fragment,null,h?g.placeHolderHTMLFrom(s||"",'<i class="fa-solid fa-spinner fa-spin-pulse"></i>'):null!=p?g.htmlFrom(s||"",{bindData:c}):"html"===f?g.htmlFrom(s||"",{bindData:y.data[0],fallBackBindData:c}):null)};function R(e){var n=e.content,r=e.bindData,o=e.fallBackBindData,a=e.loading,i=e.error;return t().createElement(t().Fragment,null,t().createElement("div",{className:""},t().createElement(O,{content:n,bindData:r,fallBackBindData:o,type:"html",loading:a,error:i})))}var A=o(745);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e,t,n){return(t=D(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,D(r.key),r)}}function D(e){var t=function(e,t){if("object"!==_(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==_(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===_(t)?t:String(t)}var I=function(){function e(t){var n=t.component,r=t.selector,o=t.props;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Component=n,this.selector=r,this.props=o,this.target=document.querySelector(this.selector),this.root=null!==this.target&&void 0!==this.target?(0,A.s)(this.target):null,this.render()}var n,r;return n=e,(r=[{key:"render",value:function(){if(null!==this.root){var e=this.Component;return this.root.render(t().createElement(e,this.props))}console.warn("ReactWidget: Target Selector does not exist.")}},{key:"unMount",value:function(){var e;null===(e=this.root)||void 0===e||e.unmount()}},{key:"setProps",value:function(e){this.props=F(F({},this.props),e),this.render()}},{key:"reset",value:function(){this.props={},this.render()}}])&&M(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}(),L=function(e){return new I({selector:e.selector,component:R,props:e.props})}}(),a}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,